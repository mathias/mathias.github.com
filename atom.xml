<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[blog.mattgauger.com]]></title>
  <link href="http://blog.mattgauger.com/atom.xml" rel="self"/>
  <link href="http://blog.mattgauger.com/"/>
  <updated>2015-09-18T20:47:56-05:00</updated>
  <id>http://blog.mattgauger.com/</id>
  <author>
    <name><![CDATA[Matt Gauger]]></name>
    <email><![CDATA[contact@mattgauger.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Clojure Data Science: Sent Counts and Aggregates]]></title>
    <link href="http://blog.mattgauger.com/blog/2014/10/23/clojure-data-science-sent-counts-and-aggregates/"/>
    <updated>2014-10-23T18:18:00-05:00</updated>
    <id>http://blog.mattgauger.com/blog/2014/10/23/clojure-data-science-sent-counts-and-aggregates</id>
    <content type="html"><![CDATA[<hr />

<p>This is Part 3 of a series of blog posts called <a href="http://blog.mattgauger.com/blog/categories/clojure-data-science">Clojure Data Science</a>. Check out the <a href="http://blog.mattgauger.com/blog/2014/04/13/clojure-data-science-refactoring-and-cleanup/">previous post</a> if you missed it.</p>

<hr />

<p>For this post, we want to generate some summaries of our data by doing aggregate queries. We won&#8217;t yet be pulling in tools like <a href="http://storm.incubator.apache.org/">Apache Storm</a> into the mix, since we can accomplish this through Datomic queries. We will also talk about trade-offs of running aggregate queries on large datasets and devise a way to save our data back to Datomic.</p>

<h2>Updating dependencies</h2>

<p>It has been some time since we worked on <a href="https://github.com/mathias/autodjinn">autodjinn</a>. Libraries move fast in the Clojure ecosystem, and we want to make sure that we&#8217;re developing against the most recent versions of each dependency. Before we begin making changes, let&#8217;s update everything. If you have already read my <a href="http://blog.mattgauger.com/blog/2014/09/15/clojure-code-quality-tools/">Clojure Code Quality Tools</a> post, you&#8217;ll be familiar with the <code>lein ancient</code> plugin.</p>

<p>Below is output when I run <code>lein ancient</code> on the last post&#8217;s finished git tag, <code>v0.1.1</code>. To go back to that state, you can run <code>git checkout v0.1.1</code> on the <a href="https://github.com/mathias/autodjinn">autodjinn repo</a>.</p>

<script src="https://gist.github.com/mathias/c349dc7cb110edb56235.js"></script>


<p>It looks like our <a href="https://github.com/james-henderson/nomad">nomad</a> dependency is out of date. Update the version number in <code>project.clj</code> to <code>0.7.0</code> and run <code>lein ancient</code> again to verify that it worked.</p>

<p>If you take a look at <code>project.clj</code> yourself, you may notice that our project is still on Clojure <code>1.5.1</code>. <code>lein ancient</code> doesn&#8217;t look at the version of Clojure that we&#8217;re specifying; it assumes you have a good reason for picking the Clojure version you specify. In our case, we&#8217;d like to be on the latest stable Clojure, version <code>1.6.0</code>. Update the version of Clojure in <code>project.clj</code> and then run your REPL. There should be no issues with using the functionality in the app that we created in previous posts. If there is, carefully read the error messages and try to find a solution before moving on.</p>

<p>To save on the hassle of upgrading, I have created a tag for the project after upgrading Clojure and nomad. To go to that tag in your local copy of the repo, run <code>git checkout v0.1.2</code>.</p>

<h2>Datomic query refresher</h2>

<p>If you remember back to the <a href="http://blog.mattgauger.com/blog/2014/03/30/clojure-data-science-ingesting-your-gmail-inbox/">first post</a>, we wrapped up by querying for entity IDs and then using Datomic&#8217;s built-in <code>entity</code> and <code>touch</code> functions to instantiate each message with all of its attributes. We had to do this because the query itself only returned a set of entity IDs:</p>

<script src="https://gist.github.com/mathias/ab5a827ca860c89e0043.js"></script>


<p>Note that the Datomic query is made up of several parts:</p>

<ul>
<li>The <code>:find</code> clause says what will be returned. In this case, it is the <code>?eid</code> variable for each record we matched in the rest of the query.</li>
<li>The <code>:where</code> clause gives a condition to match. In this case, we want all <code>?eid</code> where the entity has a <code>:mail/uid</code> fact, but we don&#8217;t care about the <code>:mail/uid</code> fact&#8217;s value, so we give it a wildcard with the underscore (<code>_</code>).</li>
</ul>


<p>We could pass in the <code>:mail/uid</code> we care about, and only get one message&#8217;s entity-ID back.</p>

<script src="https://gist.github.com/mathias/4990c69f1e4c4a7dc7e9.js"></script>


<p>Notice how the <code>?uid</code> variable gets passed in with the <code>:in</code> clause, as the third argument to <code>d/q</code>?</p>

<p>Or we could change the query to match on other attributes:</p>

<script src="https://gist.github.com/mathias/3685937809a50e36c424.js"></script>


<p>In all these cases, we&#8217;d still get the entity IDs back because the <code>:find</code> clause tells Datomic to return <code>?eid</code>. Typically, we pass around entity IDs and lazy-load any facts (attributes) that we need off that entity.</p>

<p>But, we could just as easily return other attributes from an entity as part of a query. Let&#8217;s ask for the recipients of all the emails in our system:</p>

<script src="https://gist.github.com/mathias/be2baf0af0b652966240.js"></script>


<p>While it is less common to return only the value of an entity&#8217;s attribute, being able to do so will allow us to build more functionality on top of our email abstraction later.</p>

<p>One last thing. Take a look at the return of that query above. Remember that the results returned by a Datomic query are a <a href="http://clojure.github.io/clojure/clojure.core-api.html#clojure.core/set">set</a>. In Clojure, sets are a collection of unique values. So weâ€™re seeing the unique list of addresses that are in the To: field in our data. What we&#8217;re not seeing is duplicate recipient addresses. To be able to count the number of times an email address received a message, we&#8217;ll need a list with non-unique members.</p>

<p>Datomic creates a unique set for the values returned by a query. This is generally a great thing, since it gets around some of the issues that one can run into with JOINing in SQL. But in this case, it is not ideal for what we want to accomplish. We could try to get around the uniqueness constraint on output by returning vectors of the entity ID and the <code>?to</code> address, and then mapping across the result to pull out the second item:</p>

<script src="https://gist.github.com/mathias/d6401a036d032caccde3.js"></script>


<p>There&#8217;s a simpler way that we can use in the Datomic query. By keeping it inside Datomic, we can later combine this approach with more-complex queries. We can tell the Datomic query to look at other attributes when considering what the unique key is by passing the query a <code>:with</code> clause. By changing our query slightly to include a <code>:with</code> clause, we end up with the full list of recipients in our datastore:</p>

<script src="https://gist.github.com/mathias/f36ae56bef0e1b6cdfa9.js"></script>


<p>At this point, it might be a good idea to review Datomic&#8217;s <a href="http://docs.datomic.com/query.html">querying</a> guide. We&#8217;ll be using some of the advanced querying features found in the later sections of that guide, most notably aggregate functions.</p>

<h2>Sent Counts</h2>

<p>For this feature, we want to find all the pairs of from-to addresses for each email in our datastore, and then sum up the counts for each pair. We will save all these sent counts into a new entity type in Datomic. This will allow us to ask Datomic questions like who sends you the most email, and who you send the most email to.</p>

<p>We start by building up the query in our REPL. Let&#8217;s start with a simpler query, to count how many emails have been sent <em>to</em> each email address in our data store. Note that this isn&#8217;t sufficient to answer the question above, since we won&#8217;t know who those emails came <em>from</em>; they could have been sent by us or by someone else, or they could have been sent to us. Later, we&#8217;ll make it work with from-to pairs that allow us to know things like who is sending email to us.</p>

<p>A simple way to do this would be to wrap our previous query in the <a href="http://clojure.github.io/clojure/clojure.core-api.html#clojure.core/frequencies">frequencies</a> function that Clojure.core provides. <code>frequencies</code> returns a map of items with their count from a Clojure collection.</p>

<script src="https://gist.github.com/mathias/af050f75d1c610d6d422.js"></script>


<p>However, we want to perform the same sort of thing in Datomic itself. To do that, we&#8217;re going to need to know about aggregate functions. Aggregate functions operate over the intermediate results of a Datomic query. Datomic provides functions like <code>max</code>, <code>min</code>, <code>sum</code>, <code>count</code>, <code>rand</code> (for getting a random value out of the query results), and more. With aggregates, we need to be sure to use a <code>:with</code> clause to ensure we aggregate over all our values.</p>

<p>Looking at that short list of aggregate functions I&#8217;ve named, we can see that we probably want to use the <code>count</code> function to count the occurance of each email address in a to field in our data. To see how aggregates work, I&#8217;ve come up with a simpler example (the only new thing to know is that Datomic&#8217;s Datalog implementation can query across Clojure collections as easily as it can against a database value, so I&#8217;ve given a simple vector-of-vectors here to describe data in the form</p>

<p><code>[database-id person-name]</code></p>

<p>When the query looks at records in the data, our <code>:where</code> clause gives each position in the vector an id and a name based on position in the vector.)</p>

<script src="https://gist.github.com/mathias/6b8da156388ed1cd9290.js"></script>


<p>Let&#8217;s review what happened there. Before the <code>count</code> aggregate function was applied, our results looked like this:</p>

<p><code>[["Jon"] ["Jon"] ["Bob"] ["Chris"]]</code></p>

<p>So the <code>count</code> function just counts across the values of the variable it is passed (in our case, <code>?name</code>), and by pairing it with the original <code>?name</code> value, we get each name and the number of times it appears in our dataset.</p>

<p>It makes sense that we can do the same thing with our recipient email addresses from the previous query. Combining our previous queries with the <code>count</code> aggregate function, we get:</p>

<script src="https://gist.github.com/mathias/8b346f1019d588bea534.js"></script>


<p>That looks like the same kind of data we were getting with the use of the <code>frequencies</code> function before! So now we know how to use a Datomic aggregate function to count results in our queries.</p>

<p>What&#8217;s next? Well, what we really want is to get results that are of the form</p>

<p><code>[from-address to-address]</code></p>

<p>and count those tuples. That way, we can differentiate between email sent to us versus email we&#8217;ve sent to others, etc. And eventually, we&#8217;d like to save those queries off as functions that we can call to compute the counts from other places in our project.</p>

<p>We can&#8217;t pass a tuple like <code>[from-address to-address]</code> to the <code>count</code> aggregate function in one query. The way around this is to write two queries. The inner query will return the tuples, and the outer query will return the tuple and a count of the tuple in the output data. Since the queries run on the peer, we don&#8217;t really have to worry about whether it is one query or two, just that it returns the correct data at the end.</p>

<p>So what would the inner query look like? Remember that the outer query will still need a field to pass to the <code>:with</code> clause, so we&#8217;ll probably want to pass through the entity ID.</p>

<script src="https://gist.github.com/mathias/61e60a563ffc29f06af8.js"></script>


<p>Those tuples will be used by our outer query. However, we also need a combined value for the count to operate on. For that, we can throw in a function call in the <code>:where</code> clause and give it a binding at the end for Datomic to use for that new value. In this case, I&#8217;ll combine the <code>?from</code> and <code>?to</code> values into a PersistentVector that the <code>count</code> aggregate function can use. The combined query ends up looking like this:</p>

<script src="https://gist.github.com/mathias/d26c7175670b8c29e7c2.js"></script>


<p>And the output is as we expect.</p>

<h2>Reusable functions</h2>

<p>The next step is to turn the query above into various functions we can use to query for from-to counts later. In our data, we don&#8217;t just have recipients in the To: field, we also have CC and BCC recipients. Those fields will need their own variations of the query function, but since they will share so much functionality, we will try to compose our functions in such a way that we avoid duplicate code.</p>

<p>In general, when I write query functions for Datomic, I use multiple arities to always allow a database value to be passed to the query function. This can be useful, for example, when we want to query against previous (historical) values of the database, or when we want to work with a particular database value across multiple queries, to ensure our data is consistent and doesn&#8217;t change between queries.</p>

<p>Such a query function typically looks like this:</p>

<script src="https://gist.github.com/mathias/f61fb370a3a2120daf6f.js"></script>


<p>By taking advantage of multiple arities, we can default to not having to pass a database value into the function. But in the cases where we do need to ensure a particular database version is used, we can do that. This is a very powerful idiom that I&#8217;ve learned since I began to use Datomic, and I suggest you structure all your query functions similarly.</p>

<p>Now, let&#8217;s take that function that only queries for <code>:mail/to</code> addresses and make it more generic, with specific wrapper functions for each case where we&#8217;d want to use it:</p>

<script src="https://gist.github.com/mathias/67647105799f7f2ff1cf.js"></script>


<p>Note that we had to change the inner query to take the attr we want to query on as a variable; this is the proper way to pass a piece of data into a query we want to run. The <code>$</code> that comes first in the <code>:in</code> clause tells Datomic to use the second <code>d/q</code> argument as our dataset (the db value we pass in), and the <code>?attr</code> tells it to bind the third <code>d/q</code> argument as the variable <code>?attr</code>.</p>

<p>While the three variations on functions are similar, we keep the code DRY. (DRY is an acronym for Don&#8217;t Repeat Yourself.) In the long run, less code should mean less bugs and the ability to fix problems in one place.</p>

<p>Building complex systems by composing functions is one of the features of Clojure that I enjoy the most! And notice how we got to these finished query functions by building up functionality in our REPL: another aspect of writing systems in Clojure that I appreciate.</p>

<h2>Querying against large data sets</h2>

<p>Right now, our functions calculate the sent counts across all messages every time they&#8217;re called. This is fine for the small sample dataset I&#8217;ve been working with locally, but if it were to run against the 35K+ messages that are in my Gmail inbox alone (not to mention all the labels and other places my email lives&hellip;) it would take a very long time. With even bigger datasets, we can run into an additional problem: the results may not fit into memory.</p>

<p>When building systems with datasets big enough that they don&#8217;t fit into memory, or that may take too much time to compute to be practical, there are two general approaches that we will explore. The first is storing results as data (known as memoizing or caching the results), and the other is breaking up the work to run on distributed systems like Hadoop or Apache Storm.</p>

<p>For this data, we only want to avoid redoing the calculating every time we want to know the sent counts. Currently, the data in our system changes infrequently, and it&#8217;s likely that we could tell the system to recompute sent counts only after ingesting new data from Gmail. For these reasons, a reasonable solution will be to store the computed sent counts back into Datomic.</p>

<h2>A new entity type to store our results</h2>

<p>For all three query functions we wrote, each result is of the form:</p>

<p><code>[from-address to-address count]</code></p>

<p>Let&#8217;s add to the Datomic schema in our <code>core.clj</code> file to create a new <code>:sent-count</code> entity type with these three attributes. Note that sent counts don&#8217;t really have a unique identifier of their own; it is the combination of <code>from</code> -> <code>to</code> addresses that uniquely identifies them. However, we will leave the <code>from</code> and <code>to</code> addresses as separate fields so it is easy to use them in queries.</p>

<p>Add the following maps to the <code>schema-txn</code> vector:</p>

<script src="https://gist.github.com/mathias/661dadfdb2e639209452.js"></script>


<p>You&#8217;ll have to call the <code>update-schema</code> function in your REPL to run the schema transaction.</p>

<p>Something that&#8217;s worth calling out is that we&#8217;re using a Datomic schema <code>valueType</code> that we haven&#8217;t seen yet in this project: <code>db.type/ref</code>. In most cases, you&#8217;d want to use the <code>ref</code> type to associate with other entities in Datomic. But we can also use it to associate with a given list of facts. Here, we give the <code>ref</code> type an enum of the possible values that <code>:sent-count/type</code> can have: <code>to</code>, <code>cc</code>, and <code>bcc</code>. By adding this <code>type</code> field to our new entities, we can either choose to look at sent counts for only one type of address, or we can sum up all the counts for a given from-to pair and get the total counts for the system.</p>

<p>Our next job is to add some functions to create the initial sent counts data, as well as to query for it. To keep things clean, I created a <code>sent-counts</code> namespace for these functions to live in. I&#8217;ve provided it below with minimal explanation, since it should look very familiar to what we&#8217;ve already done.</p>

<p><a href="https://github.com/mathias/autodjinn/blob/29cc08d1ead6043287ecb82136d3ee519668100f/src/autodjinn/sent_counts.clj">/src/autodjinn/sent_counts.clj</a></p>

<p>After adding in the <code>sent_counts.clj</code> file, running:</p>

<p><code>(sent-counts/create-sent-counts)</code></p>

<p>will populate your datastore with the sent counts computed with functions we created earlier.</p>

<p>Note: The sent counts don&#8217;t have any sort of unique key on them, so if you run <code>create-sent-counts</code> multiple times, you&#8217;ll get duplicate results. We&#8217;ll handle that another time when we need to update our data.</p>

<h2>Wrapping up</h2>

<p>We&#8217;ve covered a lot of material on querying Datomic. In particular, we used aggregate functions to get the counts and sums of records in our data store. Because we don&#8217;t want to run the queries all the time, we created a new entity type to store our sent counts and saved our data into it. With query functions like those found in the <code>sent-counts</code> namespace, we can start to ask our data questions like &#8220;In the dataset, what address was sent the most email?&#8221;</p>

<p>If you want to compare what youâ€™ve done with my version, you can run <code>git diff v0.1.3</code> on the <a href="https://github.com/mathias/autodjinn">autodjinn repo</a>.</p>

<p>Please let me know what you think of these posts by sending me an email at <a href="mailto:contact@mattgauger.com">contact@mattgauger.com</a>. Iâ€™d love to hear from you!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Code Quality Tools]]></title>
    <link href="http://blog.mattgauger.com/blog/2014/09/15/clojure-code-quality-tools/"/>
    <updated>2014-09-15T13:39:00-05:00</updated>
    <id>http://blog.mattgauger.com/blog/2014/09/15/clojure-code-quality-tools</id>
    <content type="html"><![CDATA[<p>I work with many programming languages on a daily basis. As a polyglot programmer, I&#8217;ve come to appreciate tools that help me follow best practices. For JavaScript, there&#8217;s the excellent <a href="http://jshint.com/">jshint</a>. When I need to verify some XML, there&#8217;s <a href="http://xmlsoft.org/xmllint.html">xmllint</a>. In a Ruby on Rails project, I can count on the <a href="http://rubygems.org/gems/rails_best_practices">rails_best_practices</a> gem. For Ruby smells, I reach for <a href="https://github.com/bbatsov/rubocop">rubocop</a>. There&#8217;s tools like <a href="https://github.com/colszowka/simplecov">SimpleCov</a> to measure test coverage on my Ruby projects. <a href="https://github.com/square/cane">cane</a> helps me to ensure line length, method complexity, and more in my Ruby code. <a href="https://github.com/scrooloose/syntastic">Syntastic</a> helps bring real syntax checking to vim for many languages. Every day, more open source tools are introduced that help me to improve the quality of the software that I write.</p>

<p>It follows that when I write Clojure code, I want nice tooling to help me manage code quality, namespace management, and out-of-date dependencies. What tools do I use on a day-to-day basis for this? In this post, I&#8217;ll show 5 tools that I use in my workflow every day on Clojure projects, and also provide some other tools for further exploration. Most of these tools exist as plugins to the excellent <a href="http://leiningen.org/">Leiningen</a> tool for Clojure.</p>

<h2>lein deps :tree</h2>

<p>In the past, <code>lein deps</code> was a command that downloaded the correct versions of your project&#8217;s dependencies. Running <code>lein deps</code> is no longer necessary, as each lein command now checks for dependencies before executing. But <code>deps</code> provides an interesting variant for our uses: <code>lein deps :tree</code>.</p>

<p>The <code>:tree</code> keyword at the end instructs lein to print out your project&#8217;s dependencies as a tree. This itself is a good visualization, but not what we&#8217;re looking for. The tree command will first print out any dependencies-of-dependencies which have conflicts with other dependencies. For example, here&#8217;s what <code>lein deps :tree</code> says for one of my projects:</p>

<script src="https://gist.github.com/mathias/8eca3548f751bec6ea55.js"></script>


<p>As you can see, the tool suggests dependencies that request conflicting versions, and how we can modify our <code>project.clj</code> file to resolve those conflicting versions by excluding one or the other. This isn&#8217;t always very useful, but when you run into issues because two different Clojure libraries require two wildly different <code>joda-time</code> versions (a situation I have run into before), it will be good to know what dependencies are causing that issue and how you might go about resolving it.</p>

<p>Note that this functionality disappeared in Leiningen 2.4.3 but is back in 2.5.0, so make sure you run <code>lein upgrade</code>!</p>

<h2><a href="https://github.com/xsc/lein-ancient">lein-ancient</a></h2>

<p>This plugin to <code>lein</code> exists simply to check your project for outdated dependencies. Without <a href="https://github.com/xsc/lein-ancient">lein-ancient</a>, I&#8217;d be unable to keep up with some of the faster-moving libraries in the Java and Clojure world.</p>

<p>After adding ancient to your <code>~/.lein/profiles.clj</code>, running the <code>lein ancient</code> command yields output on the same project as before:</p>

<script src="https://gist.github.com/mathias/bac5e554f971d7aa462f.js"></script>


<p>Whoops! Looks like I haven&#8217;t been keeping up to date with my dependencies. <code>lein ancient</code> makes checking for new dependency versions easy. Further, thanks to the ubiquity of <a href="http://semver.org/">semantic versioning</a> in Clojure projects, it is usually quite safe to bump the minor versions (0.0.x) of dependencies.</p>

<p>You can also use lein-ancient to find outdated lein plugins in your <code>~/.lein/profiles.clj</code> file. Just run it with the <code>profiles</code> argument:</p>

<script src="https://gist.github.com/mathias/02b999542ea837b87e30.js"></script>


<h2><a href="https://github.com/jonase/kibit">lein kibit</a></h2>

<p>As we gain experience and confidence in a programming language, we begin to talk about whether we&#8217;re writing <em>idiomatic</em> code. I&#8217;d argue that idiomatic code is code that accomplishes a goal with proper use of language features, in a way that other developers familiar with that language would understand. A simpler way to say it might be: idiomatic code uses the community-accepted best practices of how to do something.</p>

<p>Clojure&#8217;s design seeks to solve some problems found in older Lisps, as well as add in niceties like complementary predicate functions. A good example of these convenient complementary functions are <code>if</code> and <code>if-not</code>. Clojure also contains several cases of simplification for common usage. For example, when you don&#8217;t need an else clause on an <code>if</code>, you can use the <code>when</code> macro.</p>

<p>Wouldn&#8217;t it be great if there was someone who was well-versed in Clojure idioms pairing with you and offering suggestions? That&#8217;s exactly what <a href="https://github.com/jonase/kibit">kibit</a> does.</p>

<p>Running against a project I&#8217;d set up to contain some smells, <code>lein kibit</code> found:</p>

<script src="https://gist.github.com/mathias/fc0d446aeb90f44a6731.js"></script>


<p>These kinds of small improvements are all over our Clojure projects. They&#8217;re not show-stopper bugs, but they&#8217;re small places for improvement.</p>

<p>Kibit&#8217;s suggestions are almost always logically equivalent to the original code. Still, I always do some smoke-testing to ensure the code still works after using Kibit&#8217;s suggestion, and it generally does. Problems I frequently fix with Kibit are replacing <code>if</code> statements with the <code>when</code> macro, as well as places where the code checks for empty seqs, or that I can simplify nil checks.</p>

<p>You can point lein kibit at a specific namespace by appending the path, like this: <code>lein kibit src/foo/bar.clj</code></p>

<p>Kibit catches many cases where there is a more-idiomatic way to express what you are trying to do. I recommend running it often. In fact, it&#8217;s possible to use <a href="https://github.com/jonase/kibit#usage-from-inside-emacs">kibit in your emacs buffers</a> if you want it to be that much more convenient and real-time.</p>

<h2><a href="https://github.com/jonase/eastwood">Eastwood</a></h2>

<p>For linting Clojure code, there&#8217;s Eastwood. It is similar in functionality to Kibit, bit will catch different issues than Kibit. Built on two interesting Clojure projects: <a href="https://github.com/clojure/tools.analyzer">tools.analyzer</a> and <a href="https://github.com/clojure/tools.analyzer.jvm">tools.analyzer.jvm</a>, Eastwood does a powerful examination of your code inside the JVM. It is worth highlighting that since Eastwood loads your code to analyze it, it might trigger any side effects that happen when your code loads: writing files, modifying databases, etc. Note that it only loads the code; it does not execute it.</p>

<p>After adding <code>eastwood</code> to your lein <code>profiles.clj</code>, simply run: <code>lein eastwood</code> and you will see output like:</p>

<script src="https://gist.github.com/mathias/b93cea02293eac933bee.js"></script>


<p>That&#8217;s a lot of problems for a simple file! Notice how one mistake got caught for two reasons: A misplaced docstring (placed after the arguments vector) becomes just a string in the function body that will be thrown away.</p>

<p>Another nice catch that Eastwood provides is detecting the redefinition of the var <code>qux</code> in the file.</p>

<p>But Eastwood covers a lot more cases than just vars being def&#8217;d more than once. See the <a href="https://github.com/jonase/eastwood#whats-there">full list</a> to find out what else it does. There&#8217;s a few linters that are disabled by default, but they might make sense to enable for your project.</p>

<p>Frequently running lint tools can help prevent subtle problems that come from code that looks correct but contains some small error. Eastwood is less concerned with style than tools like JSHint are, but we have other tools that cover stylistic concerns.</p>

<h2><a href="https://github.com/dakrone/lein-bikeshed">lein bikeshed</a></h2>

<p>This is a relative newcomer to my own tool set. <a href="https://github.com/dakrone/lein-bikeshed">lein bikeshed</a> has features related to the low-hanging fruit in our Clojure code: lines longer than 80 characters, blank lines at ends of files, and more. It will also tell you what percentage of functions have docstrings. Like other tools mentioned here, it is a lein plugin that you add to your <code>profiles.clj</code>.</p>

<p>A run of <code>lein bikeshed</code> on its own source (which purposefully includes some code designed to fail) looks like this:</p>

<script src="https://gist.github.com/mathias/271e06ebce8fe6428b83.js"></script>


<p>Bikeshed might give a lot of output for your existing projects, but the warnings are worth investigating and addressing. You can always silence the long-lines warning if it doesn&#8217;t matter to you with the <code>-m</code> command line argument.</p>

<h2>Tying it all together with a Lein alias</h2>

<p>Wouldn&#8217;t it be great to run all these tools frequently, so that you can check for as many problems as possible? Well, you can, with a lein alias. (The lein wiki documents aliases in the <a href="https://github.com/technomancy/leiningen/blob/stable/sample.project.clj#L195-L211">lein sample.project.clj</a>.)</p>

<p>In <code>~/.lein/profiles.clj</code>, inside your <code>:user</code> map, add the line:</p>

<script src="https://gist.github.com/mathias/eef9f3f3e9e0ba40cb78.js"></script>


<p>Now, when you want to run all these tools at once on a project, you simply invoke <code>lein omni</code>. I use this alias on all my Clojure(Script) projects. I have grown accustomed to seeing the kinds of output that a clean Clojure project will have.</p>

<p>It&#8217;s worth noting that I don&#8217;t run Eastwood unless it is necessary for the project. When it is necessary, I override the alias in the project&#8217;s <code>project.clj</code> to run Eastwood as well.</p>

<p>This command can take some time to complete, but with an alias we&#8217;re only spinning up lein once.</p>

<h2>And a bash alias</h2>

<p>The output of <code>lein omni</code> can be long, which can either result in a lot of scrolling or neglecting to run the command due to the inconvenience. To help manage the length of the output, I&#8217;ve created a bash alias that runs the plugins and pipes them to less.</p>

<p>My personal bash alias also runs midje at the end. You can choose whether to run the tests for your own alias. That&#8217;s just my personal preference.</p>

<script src="https://gist.github.com/mathias/8b6a0040fcd7e4ae890f.js"></script>


<p>Note that just like running the lein alias above, this may take a bit of time. Since we&#8217;re piping it to <code>less</code>, it might take awhile before <code>less</code> receives output. While it is still running, output will periodically show up at the bottom of the <code>less</code> buffer. You can use both Emac&#8217;s and vim&#8217;s movement commands in <code>less</code> to advance the buffer. I find <code>less</code> to be more manageable for scrolling through output than switching to <code>tmux</code>&#8217;s history scrolling mode.</p>

<h2>Managing your namespaces: <a href="https://github.com/technomancy/slamhound">lein slamhound</a></h2>

<p>Namespace management often becomes an issue on nontrivial Clojure projects. Actively developing a project means managing the functions we pull in from other namespaces and from libraries. These require statements can often get out of date. Often, they&#8217;re either missing namespaces that are needed, or containing requirements for old functions that are no longer used in the current code.</p>

<p><a href="https://github.com/technomancy/slamhound">slamhound</a> is a tool that can help to manage dependencies in your namespaces. It knows how to require and import Clojure and Java dependencies, and can remove stale requires that are no longer necessary. Slamhound can often fix missing requires for functions that it can resolve.</p>

<p><strong>Note: slamhound rewrites the namespace macros in your project&#8217;s .clj files!</strong> I recommend only running it on code that&#8217;s committed to git (or whatever you use as a VCS) so that you can review and  rollback any changes it makes.</p>

<p>The most basic way to use slamhound is to add it to your <code>~/.lein/profiles.clj</code> as a dependency. Then add this alias:</p>

<script src="https://gist.github.com/mathias/f3799e60c63b0aebf17e.js"></script>


<p>Now you can use slamhound on a project by running <code>lein slamhound</code> in the project&#8217;s directory. There&#8217;s also REPL and Emacs support, which you can learn more about in the <a href="https://github.com/technomancy/slamhound#repl-usage">slamhound README</a>.</p>

<h2>Measuring test coverage with <a href="https://github.com/lshift/cloverage">cloverage</a></h2>

<p>It is often claimed that less unit testing is necessary in Clojure because Clojure is functional and makes use of immutable data structures. And it is true that with functional programming, most tests are simple: given some input, the output should be a certain value.</p>

<p>Some would even argue that Clojure functions should be well-factored enough into simple functions that the behavior of the function is apparent and requires no tests. Still others maintain that developing in the REPL is as good as writing unit tests, since functions are constantly evaluated and integrated with this style of development.</p>

<p>That said, there&#8217;s still mutable Java code to interop with, there&#8217;s still the necessary evil of functions with side effects, and we might want to check the <em>structure</em> of the data we&#8217;re producing in our functions rather than the value of it. For all those reasons and to check that I don&#8217;t introduce regressions, I tend to write unit tests in Clojure.</p>

<p>This blog post isn&#8217;t a platform to argue for or against testing Clojure. But when you do test, you may wonder how to tell how much test coverage your test suite has. How do we know at a glance what percentage of our namespaces is being tested? And how do we find lines that are never being exercised in our tests? After all, we can&#8217;t improve what we don&#8217;t measure.</p>

<p>That&#8217;s where <a href="https://github.com/lshift/cloverage">cloverage</a> comes in. Cloverage is another lein plugin, so it gets added to <code>~/.lein/profiles.clj</code> like the others. Then run <code>lein cloverage</code> in your project; it will run the test suite and generate a coverage report.</p>

<p>The coverage report appears in <code>target/coverage</code> as HTML files, broken down by namespace.</p>

<p>You can still use Cloverage even if you don&#8217;t use <code>clojure.test</code>. I use <a href="https://github.com/marick/Midje">midje</a> in most of my tests. To use Cloverage in those situations, wrap your tests in a <code>deftest</code>.</p>

<p>Since <code>deftest</code> has a hyphenated Clojure keyword as its identifier, and Midje facts have a string as an identifier, I&#8217;ve come to use the <code>deftest</code> to group related tests together. Usually this means naming the group of tests after the function I&#8217;m testing. Then I name Midje facts after the situation that the fact exercises. This makes sense to me because it fits well with the hierarchy of rspec unit tests in Ruby.</p>

<p>Here&#8217;s an example of using this approach:</p>

<script src="https://gist.github.com/mathias/94e1a4d7b8bce7c02e23.js"></script>


<p>Cloverage also outputs a <code>coverage.txt</code> file that might be useful for use with services like <a href="http://coveralls.io">Coveralls</a>. I haven&#8217;t used this, so I can&#8217;t comment on its usefulness.</p>

<p>If you&#8217;re using <a href="https://github.com/slagyr/speclj">speclj</a> for your tests, you might run into some issues getting Cloverage to play nice. I don&#8217;t use speclj often, so when I couldn&#8217;t get it to work with Cloverage, I didn&#8217;t pursue the issue.</p>

<h2>Final Thoughts</h2>

<p>In this post, I covered 5 tools to add to your workflow all the time, and some others that might be useful in certain cases. I&#8217;m sure there&#8217;s more tools out there that are useful that I don&#8217;t know about, and I&#8217;d love to hear about them.</p>

<p>I&#8217;m also thinking about writing some posts about other development tools that I use, particularly how I use <a href="https://github.com/marick/midje">midje</a> to test, and how you can benchmark code with <a href="https://github.com/davidsantiago/perforate">perforate</a>. If you&#8217;re interested in those topics, get in touch and let me know.</p>

<p>Have fun and enjoy your cleaner codebase with these tools in your tool belt!</p>

<hr />

<p>Interested in commenting or contacting me? Send an email to <a href="mailto:contact@mattgauger.com">contact@mattgauger.com</a>. Thanks!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Atreus: My Custom Keyboard]]></title>
    <link href="http://blog.mattgauger.com/blog/2014/08/19/atreus-my-custom-keyboard/"/>
    <updated>2014-08-19T21:38:00-05:00</updated>
    <id>http://blog.mattgauger.com/blog/2014/08/19/atreus-my-custom-keyboard</id>
    <content type="html"><![CDATA[<p>Last year I wrote about about building <a href="http://blog.mattgauger.com/blog/2013/08/03/building-a-chording-keyboard-lessons-learned-and-progress-so-far/">chording keyboards</a> and <a href="http://blog.mattgauger.com/blog/2013/08/06/a-simple-text-editor-foot-pedal/">USB foot pedals</a>. At the time, using the <a href="http://www.pjrc.com/teensy/">Teensy micro controller</a> as a USB HID device was possible, but it still required a lot of research. There was no good central resource for knowledge about building keyboards. Since then, the <a href="http://deskthority.net/wiki/ErgoDox">Ergo Dox</a> keyboard was released as open source and got quite popular. This seems to have opened the door for many to get into building keyboards.</p>

<iframe class="vine-embed" src="https://vine.co/v/M9xtVUQ2O7O/embed/simple" width="320" height="320" frameborder="0" style="float:right;"></iframe>


<script async src="http://blog.mattgauger.com//platform.vine.co/static/scripts/embed.js" charset="utf-8"></script>


<p>My friend <a href="http://coglib.com/~icordasc">Ian</a> ordered an Ergo Dox on the Massdrop crowdfunding campaign, after I suggested that I&#8217;d teach him to solder and we&#8217;d assemble it together. Finding time to get together and build it took almost a year, but we&#8217;ve started meeting up weekly to assemble the Ergo Dox. Building his keyboard has been a lot of fun, and inspired me to work on my own keyboard projects again.</p>

<p>Almost exactly a month ago, I started working on building my own keyboard. I wanted to build a keyboard from scratch that could replace my daily-driver keyboard, a PFU Happy Hacking Lite, so it had to be smaller than most <a href="http://deskthority.net/wiki/Tenkeyless">tenkeyless</a> keyboards. The Ergo Dox&#8217;s columnar layout was always intriguing, but I wasn&#8217;t sure that I needed all those keys. (Normal keyboards stagger the keys of each row, which is a holdover from preventing mechanical typewriters from jamming. Columnar layouts assign a column of keys to each finger.)</p>

<p>Through <a href="http://geekhack.org">Geekhack</a>, I found the <a href="https://github.com/technomancy/atreus">Atreus</a>, a keyboard designed by <a href="http://technomancy.us/">Phil Hagelberg</a> (better known as <a href="https://github.com/technomancy">technomancy</a> online.) The Atreus is open source (<a href="https://github.com/technomancy/atreus">hardware</a>, <a href="https://github.com/technomancy/atreus-firmware">firmware</a>), and has gone through several revisions at this point. My keyboard is done now, and I wanted to share it.</p>

<p><a href="https://www.flickr.com/photos/mattgauger/14785511628" title="IMG_3220 by Matt Gauger, on Flickr"><img src="https://farm6.staticflickr.com/5592/14785511628_5827e18f92_z.jpg" width="640" height="480" alt="IMG_3220"></a></p>

<p><a href="http://technomancy.us/173">The original Atreus</a> was constructed out of layers of laser-cut acrylic. Since then, some folks on the <a href="http://geekhack.org/index.php?topic=54759.0">Geekhack thread</a> have redesigned the laser-cut design to be cut out of a sheet of birch plywood on <a href="https://ponoko.com">Ponoko</a>. Ponoko is a great: you upload a file and choose materials and size. The Ponoko website keeps you updated on your project&#8217;s status as they check your design, pick materials, and so on. Later, your laser-cut project arrives in the mail. I highly recommend Ponoko&#8217;s service if you need laser cutting and can&#8217;t get it done at a local makerspace.</p>

<p><a href="https://www.flickr.com/photos/mattgauger/14785346149" title="IMG_3156 by Matt Gauger, on Flickr"><img src="https://farm6.staticflickr.com/5565/14785346149_ece2db51a3_z.jpg" width="640" height="480" alt="IMG_3156"></a></p>

<p>I finished the birch ply with semi-gloss marine polyurethane. The polyurethane should give it a durable finish, and added a nice amber tint to the wood. The downside is that more than a week after the final coat went on, the poly is still out gassing some headache-inducing fumes.</p>

<p>After applying the finish, I hot-glued the switches in and soldered it together. There&#8217;s no PCB with this design, just point-to-point with wires and components to a central Teensy. I used <a href="http://deskthority.net/wiki/Cherry_MX_Clear">Cherry MX Clear</a> switches for the majority of the keys because they seem the closest to my Happy Hacking&#8217;s Topre switches to me. The modifiers are <a href="http://deskthority.net/wiki/Cherry_MX_Black">Cherry MX Blacks</a>.</p>

<p>Assembling the Atreus with point-to-point soldering wasn&#8217;t too bad, but I&#8217;ve had a lot of experience soldering. I&#8217;ve no doubt that the construction will be durable and reliable, but a PCB might make it easier to assemble for beginners. There&#8217;s some talk on Geekhack about using the <a href="http://deskthority.net/workshop-f7/onehand-20-keyboard-t6617.html">One Hand PCB</a> as a circuit board for a Atreus-like keyboard.</p>

<p>The rest of my images from the build on Flickr in <a href="https://www.flickr.com/photos/mattgauger/sets/72157646763805951/">this album</a>.</p>

<p>After hours of soldering, the moment of truth came: I plugged in the Teensy, uploaded the firmware, and typed some keys. It worked! I felt relieved that the keyboard worked on the first try. Because I had checked for continuity and shorts throughout the soldering process, I can be confident that my Atreus won&#8217;t have any issues with ghosting or glitches. The finished keyboard feels really solid; maybe more so than some plastic keyboards I&#8217;ve typed on before.</p>

<p>Because the Atreus uses a columnar layout, I&#8217;m not planning to use it with a QWERTY layout. So, I decided to learn Dvorak. I&#8217;ve been practicing on the home row on <a href="http://dvorak.nl">dvorak.nl</a>, which is a great website for learning Dvorak in your browser. The neat thing about that typing tutor is that you don&#8217;t have to commit to changing any key layouts at the OS-level. I&#8217;ve got the default QWERTY layout on my Atreus now, but will be switching to a hardware-native Dvorak layout soon.</p>

<p>Since the Atreus uses a Teensy as its brain, it can be reconfigured easily by uploading a new firmware. Keyboard layouts for the Atreus start as a JSON file, and then an emacs function can be invoked to compile and upload the firmware to the board. The same JSON file can also be used to generate an HTML table of the layout with Org Mode in emacs. More information can be found on the <a href="https://github.com/technomancy/atreus-firmware">firmware project repo</a>.</p>

<h2>What next?</h2>

<p>I haven&#8217;t worked on my chording keyboard in a long time.  I&#8217;m happy to see that things like the <a href="https://github.com/tmk/tmk_keyboard">tmk firmware</a> will now make that project much easier. With my new knowledge and the many open source projects now available, I&#8217;m going to restart work on <a href="http://blog.mattgauger.com/blog/2013/08/03/building-a-chording-keyboard-lessons-learned-and-progress-so-far/">that project</a>.</p>

<p>Further, I&#8217;ve been playing with Matt Adereth&#8217;s <a href="https://github.com/adereth/dactyl">dactyl</a> to design chording keyboard layouts. Dactyl allows me to write Clojure code and output it in a format that OpenSCAD can generate a 3D model with. OpenSCAD can export the files to the formats that 3D printers use. 3D printing has a lot of promise for iteratively prototyping unique ergonomic peripherals, and I intend to try out several ideas for one-hand / chording keyboards.</p>

<p>If you&#8217;re interested in building your own keyboard, I would recommend the Ergo Dox. Especially if you can get the kit that Massdrop produced, because the circuit boards are well-made. Otherwise, spend some time on the Geekhack &amp; Deskthority forums, read some wiki pages, and test some keyboards. And if you&#8217;re interested in building the Atreus, join the <a href="http://geekhack.org/index.php?topic=54759.0">discussion</a>! Everyone in that thread has been very helpful.  This project wouldn&#8217;t have been possible without their answers and advice.</p>

<hr />

<p>Interested in commenting or contacting me? Send an email to <a href="mailto:contact@mattgauger.com">contact@mattgauger.com</a>. Thanks!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Housekeeping: Imported Coderwall protips]]></title>
    <link href="http://blog.mattgauger.com/blog/2014/07/27/housekeeping-imported-coderwall-protips/"/>
    <updated>2014-07-27T12:05:00-05:00</updated>
    <id>http://blog.mattgauger.com/blog/2014/07/27/housekeeping-imported-coderwall-protips</id>
    <content type="html"><![CDATA[<p>As part of my continuing effort to archive content I&#8217;ve created to this blog, I&#8217;ve migrated all of <a href="https://coderwall.com/p/u/mathias">my Coderwall protips</a>.</p>

<p>Here&#8217;s a quick list of the posts:</p>

<ul>
<li><a href="http://blog.mattgauger.com/blog/2013/11/14/indent-and-colorize-html-strings-in-pry/">Indent and Colorize HTML Strings in Pry</a> <em>November 14, 2013.</em></li>
<li><a href="http://blog.mattgauger.com/blog/2013/09/03/git-fml/">git fml</a> <em>September 3, 2013.</em></li>
<li><a href="http://blog.mattgauger.com/blog/2013/07/27/minskys-circle-algorithm-in-shoes-dot-rb-slash-hackety-hack/">Minsky&#8217;s Circle Algorithm in Shoes.rb / Hackety Hack</a> <em>July 27, 2013.</em></li>
<li><a href="http://blog.mattgauger.com/blog/2013/05/23/warning-nokogiri-was-built-against-libxml-version-x-dot-x-x/">WARNING: Nokogiri Was Built Against LibXML Version x.x.x</a> <em>May 23, 2013.</em></li>
<li><a href="http://blog.mattgauger.com/blog/2013/04/24/reset-a-lost-password-on-an-ubuntu-vm/">Reset a Lost Password on an Ubuntu VM</a> <em>April 24, 2013.</em></li>
<li><a href="http://blog.mattgauger.com/blog/2013/01/24/find-naughty-naughty-model-calls-in-your-views/">Find Naughty Naughty Model Calls in Your Views</a> <em>January 24, 2013.</em></li>
<li><a href="http://blog.mattgauger.com/blog/2012/12/25/find-a-unique-name-for-your-project/">Find a Unique Name for Your Project</a> <em>December 25, 2012.</em></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Data Science: Refactoring and Cleanup]]></title>
    <link href="http://blog.mattgauger.com/blog/2014/04/13/clojure-data-science-refactoring-and-cleanup/"/>
    <updated>2014-04-13T16:28:00-05:00</updated>
    <id>http://blog.mattgauger.com/blog/2014/04/13/clojure-data-science-refactoring-and-cleanup</id>
    <content type="html"><![CDATA[<hr />

<p>This is Part 2 of a series of blog posts called <a href="http://blog.mattgauger.com/blog/categories/clojure-data-science">Clojure Data Science</a>. Check out the <a href="http://blog.mattgauger.com/blog/2014/03/30/clojure-data-science-ingesting-your-gmail-inbox/">previous post</a> if you missed it.</p>

<hr />

<p>Welcome to the second post in this series. If you followed along in the last post, your code should be ready to use in this post. If not, or if you need to go back to known working state, you can clone the <a href="https://github.com/mathias/autodjinn">autodjinn repo</a> and <code>git checkout v0.1.0</code>.</p>

<p>I started out writing this post to develop simple functionality on our inbox data. Finishing the post was taking longer than I was expecting, so I split the post in half in the interest of posting this sooner.</p>

<p>In this post, we need to create an email ingestion script that we can run repeatedly with <code>lein</code>. And we need to talk about refactoring our code out into maintainable namespaces.</p>

<p>So make sure your Datomic transactor is running and launch a REPL, because it is time to give our code a makeover.</p>

<h2>A Gmail ingestion script</h2>

<p>Because Clojure sits on the JVM, it shares some similarities with Java. One of these is the special purpose of a <code>-main</code> function. You can think of this as the <code>main</code> method in a Java class. The <code>-main</code> function in a Clojure namespace will be run when a tool like <code>lein</code> tries to &#8220;run&#8221; the namespace. That sounds like exactly what we want to do with our Gmail import functionality, so we will add a <code>-main</code> function that calls our <code>ingest-inbox</code> function. To get started, we will only have it print us a message.</p>

<script src="https://gist.github.com/mathias/9965864.js"></script>


<p>You can then run this by invoking <code>lein run -m autodjinn.core</code>. You should see <code>Hello world!</code> if everything worked. You may notice that the process doesn&#8217;t seem to quit after it prints the hello world message &#8211; this seems to be problem with Leiningen. To ensure that our process ends when the script is done, we can add a <code>(System/exit 0)</code> line to the end of our <code>-main</code> function to ensure that the process quits normally. On *nix systems, a 0 return code means successful exit, and a nonzero response code means something went wrong. Knowing this, we can take advantage of response codes in the future to signal that an error occurred in our script. But for now, we will have the script end by returning 0 to indicate a successful exit.</p>

<p>Think back to what we did to ingest email in our REPL in the last post. We had to connect to the database, run the data schema transaction, and then we were able to run <code>ingest-inbox</code> to pull in our email.</p>

<p>The following function will do the same thing. Remember that things like trying to create an existing database or performing a schema update against the same schema in Datomic should be harmless. It will add a new transaction ID, but it will not modify or destroy data. Putting together all the steps we need to run, we get a <code>-main</code> function that looks like this:</p>

<script src="https://gist.github.com/mathias/9965933.js"></script>


<h2>Refactoring namespaces</h2>

<p>With Clojure, one must walk a fine line between putting all of your functions into one big file, and having too many namespaces. One big file quickly grows unmaintainable and gains too many responsibilities.</p>

<p>But having too many namespaces can also be a problem. It may create strange cyclic dependency errors. Or you may find that with many separate namespaces, you have to require many namespaces to get anything done.</p>

<p>To avoid this, I start with most code in one namespace, and then look for common functionality to extract to a new namespace. Good candidates to extract are those that all talk about the same business logic or business domain. You may notice that the responsibility for one group of functions is different than the rest of the functions. That is a good candidate for a new namespace. Looking at responsibilities can be a good way to determine where to break apart functions into namespaces.</p>

<p>In this project, we can identify two responsibilities that currently live in our autodjinn.core namespace. The first is working with the database. The second is ingesting Gmail messages. As our project grows, we will not want the code for ingesting Gmail messages to live in <code>autodjinn.core</code>. With that in mind, let&#8217;s create a new file called <code>src/autodjinn/gmail_ingestion.clj</code> and move over the vars and functions that we think should live there. That file should look like this:</p>

<script src="https://gist.github.com/mathias/9966207.js"></script>


<p>Be sure to remove the functions and vars that we moved to this file from the <code>autodjinn.core</code> namespace. Note that we moved the <code>-main</code> function here, too, so that we can now run <code>lein run -m autodjinn.gmail-ingestion</code></p>

<p>You may also notice that we still had to require the <code>datomic.api</code> namespace here to be able to perform a transaction. Our <code>autodjinn.core</code> namespace already handles database interaction, though. So let&#8217;s write a <code>create-mail</code> function in <code>core.clj</code> and call it in our new namespace:</p>

<script src="https://gist.github.com/mathias/9966294.js"></script>


<p>And in <code>gmail_ingestion.clj</code> we change <code>ingest-inbox</code> to use the new function. While we&#8217;re at it, we&#8217;ll break out a convenience function to prepare the attr map for Datomic:</p>

<script src="https://gist.github.com/mathias/9966304.js"></script>


<p>If we run our <code>lein run -m autodjinn.gmail-ingestion</code> command, we should see that the code is still working.</p>

<p>Don&#8217;t forget to remove the <code>datomic.api</code> requirement in <code>gmail-ingestion</code> namespace! Now we only need to require Datomic in the <code>autodjinn.core</code> namespace.</p>

<p>There&#8217;s one more low-hanging fruit that we can refactor about this code before moving on. The config file is loaded and used in both namespaces. We already require everything from <code>autodjinn.core</code> into <code>autodjinn.gmail-ingestion</code>. So we can safely change a few lines to use the config in <code>gmail_ingestion.clj</code> and stop requiring <code>nomad</code> in two places:</p>

<script src="https://gist.github.com/mathias/9966372.js"></script>


<p>And in <code>core.clj</code>:</p>

<script src="https://gist.github.com/mathias/9966384.js"></script>


<p>Running <code>lein run -m autodjinn.gmail-ingestion</code> one more time, we should see that our changes did not break the system. The config is now only loaded once, and we use it everywhere.</p>

<p>That&#8217;s it! We&#8217;ve taken care of some low-hanging fruit and are ready to implement some new functionality. If you want to compare what you&#8217;ve done with my version, you can run <code>git diff v0.1.1</code> on the <a href="https://github.com/mathias/autodjinn">autodjinn repo</a>.</p>

<p>Please let me know what you think of these posts by sending me an email at <a href="mailto:contact@mattgauger.com">contact@mattgauger.com</a>. I&#8217;d love to hear from you!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Data Science: Ingesting Your Gmail Inbox]]></title>
    <link href="http://blog.mattgauger.com/blog/2014/03/30/clojure-data-science-ingesting-your-gmail-inbox/"/>
    <updated>2014-03-30T14:44:00-05:00</updated>
    <id>http://blog.mattgauger.com/blog/2014/03/30/clojure-data-science-ingesting-your-gmail-inbox</id>
    <content type="html"><![CDATA[<hr />

<p>This is Part 1 of a series of blog posts inspired by the exercises from <a href="http://shop.oreilly.com/product/0636920025054.do">Agile Data Science</a> with Clojure. You may be interested in my <a href="http://blog.mattgauger.com/blog/2014/03/14/agile-data-science-review-and-thoughts/">review</a> of the book.</p>

<hr />

<p>For this blog post series, we are going to use your Gmail inbox as a dataset for an exploration of data science practices. Namely, we will use your email for machine learning and natural language processing applications. Email makes interesting data to process:</p>

<ul>
<li>it has lots of metadata that we can use as features <a href="#cds-gmail-footnote-1" name="cds-gmail-footnote-1-return">[1]</a></li>
<li>we can model the relationships of senders and receivers as a graph</li>
<li>each message has a body of text associated with it that we can analyze</li>
<li>gaining insights from our personal communication is far more interesting than using an open data set!</li>
</ul>


<p><strong>Note:</strong> This is not an intro-to-Clojure blog post. If you need a tutorial that starts with the basics, I recommend the <a href="http://aphyr.com/tags/Clojure-from-the-ground-up">Clojure from the ground up</a> blog post series by <a href="https://twitter.com/aphyr">Aphyr</a>. It does an excellent job at introducing concepts in Clojure.</p>

<p>In this post, I follow my typical Clojure workflow: I open a REPL and begin exploring the problem space. I look at individual pieces of data and start transforming them. When I write some functionality that I like for one piece of data, I try to extract it into the source code as a function that can work for any data our project may see. In this way, we can build up the project to contain the functions that are necessary to get to our goal.</p>

<p>So what is our goal for this blog post? Well, we want to fetch all emails from our Gmail inbox. We want to get metadata for each email, including things like who sent it and when it was sent. Then, we want to save the messages into a database so we can do further processing in later posts.</p>

<p>Starting off, make a new basic Clojure project with lein. I&#8217;ve named my project <a href="https://github.com/mathias/autodjinn">autodjinn</a> after <a href="http://en.wikipedia.org/wiki/Email#Origin">AUTODIN</a>, one of the first email networks. You can use the <a href="https://github.com/mathias/autodjinn">repo</a> to refer to and to clone to follow along. At the beginning of each subsequent post, I&#8217;ll provide a SHA that you can reset the code to. Feel free to name your project whatever you want; just be sure to pay attention to the changes in filenames and namespaces as we go along!</p>

<p>Create the project and enter it:</p>

<script src="https://gist.github.com/mathias/9861772.js"></script>


<p>To import our Gmail data, we will use a Clojure library called <a href="https://github.com/owainlewis/clojure-mail">clojure-mail</a>. Clojure-mail is still under active development and is likely to change. For this blog post, we&#8217;ll be using version <code>0.1.6</code> to ensure compatibility between the code in this post and the library.</p>

<p>Edit <code>project.clj</code> to contain your information and add the <code>[clojure-mail "0.1.6"]</code> dependency:</p>

<script src="https://gist.github.com/mathias/9861804.js"></script>


<p>We&#8217;ll start by working in <code>src/autodjinn/core.clj</code> and later move the functionality out into a script for our email import task. Open up the file in your favorite editor and launch a REPL.</p>

<p>In your REPL, <code>(use 'autodjinn.core)</code> and verify it worked by running <code>(foo "MYNAME")</code>. You should see &#8220;MYNAME Hello, World!&#8221; printed out. Feel free to remove the <code>(defn fooâ€¦)</code> in <code>core.clj</code> now. We will not need it.</p>

<p>You may want to use something like Emacs&#8217; <a href="https://github.com/clojure-emacs/cider">cider</a> or LightTable&#8217;s InstaREPL as your REPL environment. But you can use the regular Clojure REPL to build this project, as well. If you are not working with a REPL integrated to your editor, you will need to run <code>(use 'autodjinn.core :reload)</code> to force a reload of the code each time you save.</p>

<h2>Connecting to Gmail</h2>

<p>Our first goal is to connect to our inbox and verify that we can read email from it. To do that, we&#8217;re going to need to use our Gmail address and password &mdash; which we don&#8217;t want to put into our source files. <strong>It&#8217;s bad practice to put a password or a private key into a source file or check it into our repo! Just don&#8217;t do it!</strong></p>

<p>Instead, we will use a nice library called <a href="https://github.com/james-henderson/nomad">nomad</a> to load a config file containing our email address and password. We will add the config file to <code>.gitignore</code> so that it is never saved into our code.</p>

<p>Add the line <code>[jarohen/nomad "0.6.3"]</code> to your <code>project.clj</code> dependencies before moving on, and run <code>lein deps</code> in a console to pull in the dependency.</p>

<p>Back in our <code>core.clj</code> add the require statements for <code>clojure-mail</code> and <code>nomad</code> to your ns macro like this:</p>

<script src="https://gist.github.com/mathias/9863912.js"></script>


<p>Then create a new file in <code>resources/config/autodjinn-config.edn</code>. It should look like this, with your email address and password filled in:</p>

<script src="https://gist.github.com/mathias/9864315.js"></script>


<p>Now open up your <code>.gitignore</code> file and add the following line to it:</p>

<script src="https://gist.github.com/mathias/9866473.js"></script>


<p>Following <a href="https://github.com/james-henderson/nomad#hello-world">nomad&#8217;s README</a>, we need to load our config file and pull out our <code>gmail-username</code> and <code>gmail-password</code> keys. We add to the following to <code>core.clj</code> after the <code>ns</code> macro:</p>

<script src="https://gist.github.com/mathias/8c0849fc0e137f1bd611.js"></script>


<p>Using the <code>get</code> function here is a safe lookup for maps that returns <code>nil</code> if nothing is found for the key. Back in our REPL, we can see this in action with some quick experimentation:</p>

<script src="https://gist.github.com/mathias/9864411.js"></script>


<p>We could also use the shorter <code>(:keyname mymap)</code> syntax here, since symbols are an invocable function that looks up a key in a map. But the <code>get</code> function reads better than <code>(:gmail-username (autodjinn-config))</code> in my opinion.</p>

<p>In your REPL, you should now be able to get the values for <code>gmail-username</code> and <code>gmail-password</code>:</p>

<script src="https://gist.github.com/mathias/9864585.js"></script>


<p>Note that since I&#8217;m in the <code>user</code> namespace here, I had to qualify the vars with their <code>autodjinn.core</code> namespace. If this is confusing, you might want to read up on <a href="http://clojure-doc.org/articles/language/namespaces.html">namespaces in Clojure</a> before moving on. (See also: the &#8216;Namespaces&#8217; section in <a href="http://aphyr.com/posts/311-clojure-from-the-ground-up-logistics">Clojure from the ground up: logistics</a>.)</p>

<p><code>clojure-mail</code> requires us to open a connection to Gmail with the <code>gen-store</code> function (<a href="https://github.com/owainlewis/clojure-mail/blob/c3aad67b42aad96405d4c329ca48e29b7960d412/src/clojure_mail/core.clj#L80-L83">src</a>). We then pass that connection around to various functions to interact with our inbox. Define a var called <code>my-store</code> in your <code>core.clj</code> that does this with our email address and password:</p>

<script src="https://gist.github.com/mathias/9865909.js"></script>


<p>Make sure the <code>(def my-storeâ€¦</code> above has been run in your REPL and then take a look at our open connection:</p>

<script src="https://gist.github.com/mathias/9865937.js"></script>


<p>The type of <code>my-store</code> should be an <code>IMAPSSLStore</code> as above. If it didn&#8217;t work, you&#8217;ll see a string error message when you try to define <code>my-store</code>.</p>

<h2>Your inbox as a list</h2>

<p>Now we&#8217;ll use our REPL to build up a function that will eventually import all of our email. To start, we can use the <code>inbox</code> function (<a href="https://github.com/owainlewis/clojure-mail/blob/c3aad67b42aad96405d4c329ca48e29b7960d412/src/clojure_mail/core.clj#L198-L201">src</a>) from <code>clojure-mail</code> to get a seq of messages in our inbox. Note that since it is a seq and inboxes can be very large, we limit it with the <code>take</code> function.</p>

<script src="https://gist.github.com/mathias/9866030.js"></script>


<p>If everything is working, you should see a list of of the <code>IMAPMessage</code>s returned by the last line in your REPL.</p>

<p>What if, instead, we wanted to loop over many messages and print out their subjects? We can pull in the <code>message</code> namespace (<a href="https://github.com/owainlewis/clojure-mail/blob/master/src/clojure_mail/message.clj">src</a>) from <code>clojure-mail</code>, which gives us convenience functions for getting at message data.</p>

<p>You&#8217;ll have to be careful running this next line &mdash; on a large inbox it&#8217;ll print out the subject of everything in your inbox! If you have a lot of messages, consider wrapping the call to <code>inbox</code> in a <code>take</code> as above.</p>

<script src="https://gist.github.com/mathias/9866059.js"></script>


<p>Those are the subject lines of the 4 messages in the inbox of my test account, so I know that this is working. Save our <code>doseq</code> line into a function called <code>ingest-inbox</code>; we&#8217;ll come back to it later:</p>

<script src="https://gist.github.com/mathias/9866289.js"></script>


<h2>Examining messages</h2>

<p>Before we move on, let&#8217;s take a look at an individual message and what we can get out of it from the <code>message</code> namespace.</p>

<script src="https://gist.github.com/mathias/9866195.js"></script>


<p>From this, we can see a few things:</p>

<ul>
<li>The ID returned by <code>message/id</code> looks like a good candidate to get good unique IDs for each message when we store the messages. But we might want to strip off those angle brackets first.</li>
<li>The <code>message/message-body</code> function doesn&#8217;t return a string of the body. Instead, it returns a list of maps which contains the <code>text/plain</code> form of the body and the <code>text/html</code> form. We will have to extract each from the map so that we can use the plaintext version for things like language processing. We&#8217;ll also keep the HTML version in case we need it later.</li>
<li>If you started digging in to the <code>message</code> namespace&#8217;s source you may have noticed that we don&#8217;t have functions for getting date sent or date received for a message. Nor can we get a list of addresses CCed or BCCed for the message. We&#8217;ll have to write those functions ourselves.</li>
</ul>


<h2>Cleaning up the IDs</h2>

<p>Let&#8217;s focus on writing a function to clean up the ID returned by the <code>message/id</code> function. Recall that such IDs look like <code>&lt;CAJiAYR90LbbN6k8tVXuhQc8f6bZoK647ycdc7mxF5mVEaoLKHw@mail.gmail.com&gt;</code></p>

<p>The <code>clojure.string</code> namespace provides a <code>replace</code> function which does simple replacement on a string. We can use it like this:</p>

<script src="https://gist.github.com/mathias/9866344.js"></script>


<p>That worked for replacing the angle brackets for the original string. But remember that data structures are immutable in Clojure, including strings. Replacing the first angle bracket didn&#8217;t change the original string when we tried to replace the other angle bracket. We need something that allows us to build up an intermediate value and pass it to the next function. For that, we will use the <a href="http://clojure.github.io/clojure/clojure.core-api.html#clojure.core/-%3e">thread-first</a> macro: <code>-&gt;</code>. It is easiest if I show the macro in use with some comments showing what the intermediate values would be at each step:</p>

<script src="https://gist.github.com/mathias/9866380.js"></script>


<p>It is called the <strong>thread-first</strong> macro because it threads through the first argument to each function. In this case, <code>clojure.string/replace</code>&#8217;s first argument is the string to replace on. So the each successively returned value gets passed to the next function above.</p>

<p>Now that we&#8217;ve figured out how to clean up that ID, we will create a function to clean up any ID we pass it:</p>

<script src="https://gist.github.com/mathias/9866436.js"></script>


<h2>Extracting the message bodies</h2>

<p>Recall the <code>message/message-body</code> call above:</p>

<script src="https://gist.github.com/mathias/9866777.js"></script>


<p>Ideally, we want to write a function that can get the <code>text/plain</code> body out of this value, and another function that can get the <code>text/html</code> body out. Notice that the <code>:content-type</code> values aren&#8217;t quite so simple as just selecting the item in the list where the string <code>text/plain</code> appears. We will need our function to ignore the additional information in the <code>:content-type</code> value, which includes things like string encodings.</p>

<p>Let&#8217;s look at just the first map in the list returned by <code>message/message-body</code>:</p>

<script src="https://gist.github.com/mathias/9866861.js"></script>


<p>If we build a predicate function that can detect when the <code>:content-type</code> key is the type we want, we can use it in a <code>filter</code> function to choose the correct type of body in our functions.</p>

<p>Notice that <code>TEXT/PLAIN</code> and <code>TEXT/HTML</code> are always separated from the rest of the content-type by a semicolon, and it always appears first. You&#8217;d have to look at a few messages from your inbox to arrive at the same conclusion, but I&#8217;ve already done the work and can assure you that the previous statement is true.</p>

<p>Then, an easy to to get at the part of the content-type we want would be to split on the semicolon and take the first element returned:</p>

<script src="https://gist.github.com/mathias/9867049.js"></script>


<p>This leads us to a function to first clean up the content-type string, and then our predicate function to detect if it is the one we want:</p>

<script src="https://gist.github.com/mathias/9867072.js"></script>


<p>To finish off our work on the message bodies, we want to filter the list returned by <code>message/message-body</code>:</p>

<script src="https://gist.github.com/mathias/9867356.js"></script>


<p>And turn it into a function that works for any message bodies list:</p>

<script src="https://gist.github.com/mathias/9867382.js"></script>


<p>Note that we&#8217;ve also used this function to create two convenience functions, one for extracting plaintext bodies and one for extracting HTML bodies. By keeping functions simple and small, we can build up useful functions for our project rather than try to plan it all out ahead of time.</p>

<h2>Getting more information out of the IMAPMessages</h2>

<p>As noted above, we will need to write a few more functions to get the fields of the <code>IMAPMessage</code>s that we cannot get through this version of <code>clojure-mail</code>. Recall that we want to get CC list, BCC list, date sent, and date received values. To do that, we will use Java interop functionality. It&#8217;s really not as bad as it sounds. Remember that the <code>IMAPMessage</code>s we see are Java instances of the <code>IMAPMessage</code> class. Calling a method on an instance is accomplished by using a dot before the method name, with the method in the function position, such as: <code>(.javaMethod some-java-instance)</code></p>

<p>To start, we can look at <code>clojure-mail</code>&#8217;s <a href="https://github.com/owainlewis/clojure-mail/blob/c3aad67b42aad96405d4c329ca48e29b7960d412/project.clj">project.clj</a> and see that it depends on <code>javax.mail</code>. The next step is to find the documentation for the Java implementation of <code>javax.mail.Message</code>, which <a href="http://docs.oracle.com/javaee/6/api/javax/mail/Message.html">lives here</a>.</p>

<p>In the REPL, we can try some of the Java interop on our <code>my-msg</code>:</p>

<script src="https://gist.github.com/mathias/9876540.js"></script>


<p>The datetimes for each message are automatically turned into Clojure instants for us, which is convenient. If we dig into how the <code>clojure-mail.message/to</code> function [<a href="https://github.com/owainlewis/clojure-mail/blob/c3aad67b42aad96405d4c329ca48e29b7960d412/src/clojure_mail/message.clj#L16-L20">src</a>] works, we see that it is using the <code>.getRecipients</code> method. <code>.getRecipients</code> takes the message and a constant of a <code>RecipientType</code>. For our purposes, we want the <code>javax.mail.Message$RecipientType/CC</code> and <code>javax.mail.Message$RecipientType/BCC</code> recipients:</p>

<script src="https://gist.github.com/mathias/9876632.js"></script>


<p>The last line maps the <code>str</code> function across each element returned, so that we get the string representation of the email addresses. That way, our database can just store the strings.</p>

<p>As before, now that we know how to use these methods in the REPL, we write functions in <code>core.clj</code> to take advantage of our newfound knowledge:</p>

<script src="https://gist.github.com/mathias/9876737.js"></script>


<p>In the REPL, it should now be possible to get a nice map representation of all the fields on the message we care about:</p>

<script src="https://gist.github.com/mathias/9876884.js"></script>


<p>Congrats on making it this far. We&#8217;ve used quite a few neat little features of Clojure and the libraries we&#8217;re building this project with to get here.</p>

<p>The last step we&#8217;ll go through in this post is to get these messages into a database.</p>

<h2>Enter Datomic, the immutable datastore</h2>

<p><a href="http://www.datomic.com/">Datomic</a> is a great database layer built on Clojure that gives us a database value representing immutable data. New transactions on the database create new database values. It fits very well with Clojure&#8217;s own concept of <a href="http://clojure.org/state">state and identity</a> because it was designed by the same folks as Clojure. Plus, Datomic is meant to grow and scale in modern environments like AWS, with many backend datastore options to run it on.</p>

<p>There&#8217;s some important reasons why you might choose Datomic as your database for a data science / machine learning application:</p>

<ul>
<li>There are various storage backends, so you can grow from tens of thousands of rows in PostgreSQL on a developer&#8217;s laptop to millions of records (or more) in Riak or DynamoDB on AWS. That is, it has a good migration path from small datasets to big data through the Datomic import/export process</li>
<li>The concept of time associated with each value in Datomic means that we can query for historical data to compare against</li>
<li>Datomic has a lightweight schema compared to a relational database like PostgreSQL. Schemas are just data! When we begin computing new values from our dataset, we can add new types of entities easily at the same time.</li>
<li>Datomic&#8217;s schemas allow us to treat it as a key-value store, relational database, or even build a graph store on top of it, if we need to</li>
</ul>


<p><strong>Note</strong>: I won&#8217;t go through setting up an entire Datomic installation here. It&#8217;s worth reading up on the <a href="http://docs.datomic.com/">docs</a> and the <a href="http://www.datomic.com/rationale.html">rationale</a> behind Datomic&#8217;s design.</p>

<p>You can get the <a href="https://my.datomic.com/downloads/free">Datomic free build</a> if you like, but you will be limited to in-memory stores. It is unlikely that your Gmail inbox will fit into memory on your dev machine. Instead, I recommend signing up for the free <a href="http://www.datomic.com/get-datomic.html">Datomic Pro Starter Edition</a>. (The free Starter Edition is fine because you will not be using this project in a commercial capacity.) Once you have Datomic Pro downloaded and installed in your local Maven, I recommend using the PostgreSQL storage adapter locally with memcached. Follow the guides for configuring storage on the <a href="http://docs.datomic.com/storage.html">Datomic Storage</a> page.</p>

<p>Add the correct line to your <code>project.clj</code> dependencies for the version of Datomic you&#8217;ll be using (mine was <code>[com.datomic/datomic-pro "0.9.4384"]</code> which might be a bit out of date and likely won&#8217;t match yours.) Now we can start using Datomic in our <code>core.clj</code> and our REPL.</p>

<p>The first thing we need is the URI where the Datomic database lives. When we start up the Datomic transactor, you will see a DB URI that looks something like <code>datomic:sql://DBNAMEHERE?jdbc:postgresql://localhost:5432/datomic?user=datomic&amp;password=datomic</code> in the output. Grab that URI and add it to our <code>resources/config/autodjinn-config.edn</code>:</p>

<script src="https://gist.github.com/mathias/9877346.js"></script>


<p>Back at the top of <code>core.clj</code>, save that value to a var as we did with <code>gmail-username</code> and <code>gmail-password</code>:</p>

<script src="https://gist.github.com/mathias/9877374.js"></script>


<p>And then in the REPL:</p>

<script src="https://gist.github.com/mathias/9879199.js"></script>


<p>Note that according to the <a href="http://docs.datomic.com/clojure/index.html#datomic.api/create-database">datomic clojure docs for the create-database function</a>, it returns true if the database was created, and false if it already exists. So running <code>create-database</code> every time we run our script is safe, since it won&#8217;t destroy data.</p>

<p>If the above work in the REPL doesn&#8217;t work, it is likely your code is unable to talk to your running Datomic, or your Datomic transactor is not configured correctly. Diagnose it with Googling and reading the docs until you get it to work, then move on.</p>

<p>Calling <code>(d/db db-connection)</code> gives us the current value of our database. In most cases, we want to just get the most current value. So, we can write a convenience function <code>new-db-val</code> to always get us the current (and possibly different) database value. But there are cases where we want to coordinate several queries and use the same database values for each. In those cases, we won&#8217;t use the function get the latest database value, but rather pass this database value to the queries so that all query against the same state.</p>

<p>In our <code>core.clj</code>, we can add the code we need to create the database, get our connection, and the convenience <code>new-db-val</code> function:</p>

<script src="https://gist.github.com/mathias/9879246.js"></script>


<p>Next, we need to tell Datomic about the schema of our data. Schemas are just data that you run as a transaction on the database. Reading up on the <a href="http://docs.datomic.com/schema.html">Schema</a> page of the Datomic docs might be helpful to understand what&#8217;s going on here. The short version is that we define each attribute of an email and set up its properties. The collection of all attributes together will constitute a <code>mail</code> entity, so we namespace all the attributes under the <code>:mail/</code> namespace.</p>

<script src="https://gist.github.com/mathias/9879323.js"></script>


<p>We add that var def to our <code>core.clj</code> because it is, after all, just data. We may choose later to move it to its own <code>edn</code> file, but for now, it can live in our source code. Next, we want to apply this schema to our database with a transaction. That looks like this:</p>

<script src="https://gist.github.com/mathias/9879355.js"></script>


<p>Now we put that transaction in a convenience function in <code>core.clj</code> that we&#8217;ll run every time we run this file. The function will ensure that our database is &#8216;converged&#8217; to this schema. Running a transaction will create a new database value. But it will not blow away any data that we had in the database by running this transaction many times. It will simply try to update the existing attributes, and nothing in the attributes themselves need change. It is far more work to retract (delete) data in Datomic than it is to add or update it. This leads to much more safety around working with data without worrying that we will destroy data, and it encourages a REPL-based exploration of the data and its history.</p>

<script src="https://gist.github.com/mathias/9879424.js"></script>


<p>Now that our <code>mail</code> entities are defined in Datomic, we can try a query to find all the entity-IDs where any <code>:mail/uid</code> value is present. Read up on the <a href="http://docs.datomic.com/query.html">Query</a> page of the Datomic docs to dig into querying deeper. You might also be interested in the excellent <a href="http://www.learndatalogtoday.org/">Learn Datalog Today</a> website to learn more about querying Datomic with Datalog.</p>

<script src="https://gist.github.com/mathias/9879491.js"></script>


<p>Since we have no <code>mail</code> entities in our database, Datomic returns an empty set. So now we reach the end of task: We can ingest some emails and save them in our database! Return to the <code>ingest-inbox</code> function that we left before. Here&#8217;s what the updated version will look like:</p>

<script src="https://gist.github.com/mathias/9879494.js"></script>


<p>We use the <code>@</code>-sign before the <code>(d/transactâ€¦)</code> call because Datomic normally returns a promise of the completed transaction. However, we want to force Datomic to complete each transaction before moving on by deref-ing it with the <code>@</code>-sign. Per the Clojure docs: &#8220;Calls to deref/@ prior to delivery will block.&#8221;</p>

<p>If you run this function in your REPL, you should see it start to ingest your email from Gmail!</p>

<script src="https://gist.github.com/mathias/9879552.js"></script>


<p>Note that this could a take a <strong>long time</strong> if you&#8217;ve chosen to import a really large Gmail inbox! You might want to stop the import at some point; in most REPLs <code>Ctrl-c</code> will stop the running function.</p>

<p>If we query for our entity-IDs again, as above, we should see some values returned!</p>

<p>What does one of those database entities look like when we run it through Datomic&#8217;s <a href="http://docs.datomic.com/clojure/index.html#datomic.api/entity">entity</a> and <a href="http://docs.datomic.com/clojure/index.html#datomic.api/touch">touch</a> functions to instantiate all its attributes?</p>

<script src="https://gist.github.com/mathias/9879636.js"></script>


<h2>Wrapping up</h2>

<p>That&#8217;s it for this blog post. It took a little setup, but we were able to build up a working Gmail import tool with help from our REPL and some nice Clojure libraries.</p>

<p>Next time, we&#8217;ll be looking at doing some basic querying of the data, including getting a count of the number of times each email address has sent you an email.</p>

<p>Comments? Questions? Feel free to contact me at <a href="mailto:contact@mattgauger.com">contact@mattgauger.com</a>. I&#8217;d love to hear from you.</p>

<hr />

<p><a name="cds-gmail-footnote-1"></a>
<strong>1</strong> In this case, machine learning <em>features</em>, which are the input variables for our learning tasks. Not software features that we a client might ask us to implement. See: <a href="https://en.wikipedia.org/wiki/Feature_learning">Feature learning - Wikipedia, the free encyclopedia</a>.
<a href="#cds-gmail-footnote-1-return">â†©</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A quick dashboard in Hoplon &amp; Castra]]></title>
    <link href="http://blog.mattgauger.com/blog/2014/03/20/a-quick-dashboard-in-hoplon-and-castra/"/>
    <updated>2014-03-20T13:29:00-05:00</updated>
    <id>http://blog.mattgauger.com/blog/2014/03/20/a-quick-dashboard-in-hoplon-and-castra</id>
    <content type="html"><![CDATA[<p><em>Note:</em> I began writing a much longer blog post that went into a ton of detail about how to build an app dashboard that used Hoplon and Castra. The kind of dashboard that just consumes JSON API endpoints from another app or other data sources. Such dashboards update on the fly in the browser. Many apps these days need a dashboard like this to monitor stats: worker job queues, database size, average response times, etc.</p>

<p>Rather than that long blog post, I wanted to simply show the steps I would take to build such a dashboard with <a href="http://hoplon.io">Hoplon</a> and <a href="https://github.com/tailrecursion/castra">Castra</a>. I won&#8217;t go into detail here or explain either Hoplon or Castra &mdash; go read on your own first, and also look into <a href="https://github.com/tailrecursion/boot">boot</a>, the build tool this uses.</p>

<p>If you want to follow along, I&#8217;ve provided a <a href="https://github.com/mathias/gleam">repo</a>. The <a href="https://github.com/mathias/gleam/blob/30b4976b313c950c6cc97e64c65036eb21d75378/README.md">README</a> has instructions for getting setup. Assuming you have boot installed, you can just run <code>boot gleam-app</code> to get started.</p>

<p>So here&#8217;s how I&#8217;d build up a dashboard, in several iterations:</p>

<h2>Static data in the browser:</h2>

<p>First, we get some data into the HTML using Hoplon cells:</p>

<script src="https://gist.github.com/mathias/9670739.js"></script>


<p>You&#8217;ll want to <code>git reset --hard 69b070</code> to get to this point.</p>

<h2>Move the data to ClojureScript:</h2>

<p>In <code>src/cljs/gleam/rpc.cljs</code>:</p>

<script src="https://gist.github.com/mathias/9635157.js"></script>


<p>And take out the <code>(def articlesâ€¦)</code> from <code>index.html.hl</code>. After boot recompiles everything, you should still see the data in the page.</p>

<p>To get to this point, you can run <code>git reset --hard d63f299</code>.</p>

<h2>Move the data to the server side</h2>

<p>Change <code>src/cljs/gleam/rpc.cljs</code> again, this time to make a remote call for data:</p>

<script src="https://gist.github.com/mathias/9671172.js"></script>


<p>On the backend, we need something like this in <code>src/castra/gleam/api/gleam.clj</code>:</p>

<script src="https://gist.github.com/mathias/9671200.js"></script>


<p>The Hoplon HTML file changes in the script tag at the top to use the new ClojureScript remote call and start up the polling:</p>

<script src="https://gist.github.com/mathias/9671220.js"></script>


<p>To get to this point in the example repo, you can do <code>git reset --hard 0bad1e5</code>.</p>

<h2>Real time data</h2>

<p>The last step that I will show is to verify that we are in fact getting regular updates of data from the back end.</p>

<p>Change your Castra Clojure file to look like this:</p>

<script src="https://gist.github.com/mathias/9671661.js"></script>


<p>To get to this point, you can do a <code>git reset --hard f19325</code></p>

<h2>Talking to a remote service.</h2>

<p>The last step here is left as an exercise for the reader. You can imagine replacing the <code>articles</code> function in <code>src/castra/gleam/api/gleam.clj</code> with something that polls a remote JSON API for data. Or you could look at my social news app <a href="http://github.com/mathias/gnar">gnar</a> for inspiration on using a Postgres database for data.</p>

<p>I hope to finish up a post with full explanations soon. Castra is relatively new, and it&#8217;s worth explaining how some of the pieces fit together. My explanation should include more complicated interaction. like user authentication. I will be publishing that blog post after I get back from <a href="http://clojurewest.org">ClojureWest</a> next week!</p>

<p>Let me know what you thought of this post by shooting me an <a href="mailto:contact@mattgauger.com">email</a>. I&#8217;d love to hear from you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Agile Data Science: Review and Thoughts]]></title>
    <link href="http://blog.mattgauger.com/blog/2014/03/14/agile-data-science-review-and-thoughts/"/>
    <updated>2014-03-14T19:53:00-05:00</updated>
    <id>http://blog.mattgauger.com/blog/2014/03/14/agile-data-science-review-and-thoughts</id>
    <content type="html"><![CDATA[<p><a href="http://shop.oreilly.com/product/0636920025054.do">
  <img src="http://blog.mattgauger.com//blog.mattgauger.com/images/agile_data_science_cover.gif" alt="Agile Data Science cover" style="display: block; float:right; margin: 10px;">
</a></p>

<p>Recently, I read the book <a href="http://shop.oreilly.com/product/0636920025054.do">Agile Data Science</a> by Russell Jurney. The book covers data science and how the author applies an agile workflow and powerful tooling to accomplish tasks. While I found the book interesting, and would recommend it as a good introduction, I have some issues with the book that I&#8217;d like to discuss. I&#8217;d like to go over the book and the tools briefly, if only to save my thoughts for later.</p>

<p>A quick note: data science is actively being defined by the web community as the process of analyzing large data sets with statistics and other approaches. That definition is ongoing and changing all the time. Big Data is the term that the industry seems to be using for such large datasets. You&#8217;ll also see the terms machine learning, analytics, and recommender systems mentioned: these are all various sub-topics that I won&#8217;t cover in depth here.</p>

<p>The book centers around the use of <a href="http://hadoop.apache.org/">Hadoop</a>. In turn, Hadoop is commanded by writing and running <a href="https://pig.apache.org/">Apache Pig</a> scripts in the book. Pig allows you to write workflows in a high-level scripting language that may compose many Hadoop jobs into one system. With Pig, you need not worry about the specifics of what each Hadoop job is doing when you write a Pig script.</p>

<p>Hadoop is patterned after Google&#8217;s <a href="http://static.googleusercontent.com/media/research.google.com/en/us/archive/mapreduce-osdi04.pdf">MapReduce paper</a>. Google had large clusters of computers and large data sets that it wanted to process on those clusters. What they came up with was a simple idea: Write a single program that would specify a <code>map</code> function to run across tuples of all the input data. Add a <code>reduce</code> function that compiles that output down into the expected format. MapReduce coordinates deploying the program to each worker machine, divvying up the input data across the different machines, gathering up the results, and handling things like restarts after failures. This was a huge success inside Google, and Hadoop implements that architecture with improvements.</p>

<p>It should be noted that this MapReduce architecture is essentially batch-processing for large amounts of data. The same system would have a hard time with continuous streams of data.</p>

<p>Hadoop is, unfortunately, my first stumbling block with learning to process big data.</p>

<p>Configuring and running Hadoop is not easy. I have far more experience as a developer than a sysadmin (or today&#8217;s term: devops engineer). There exists more than one &#8220;distribution&#8221; of Hadoop and more than one versioning scheme between those. This means that understanding what&#8217;s available, how to configure it, and whether search results are relevant to you is quite hard for the unexperienced.  Imagine the confusion of trying to install a Debian Linux distro and only being able to find instructions for Red Hat Linux; further, not being able to tell what the problem was when it wouldnâ€™t boot and printed a Debian-specific error.</p>

<p>It seems like Hadoop is designed for to be run by someone whose full-time job is to configure and maintain that cluster. That person will need to have enough experience with all the different choices to have an opinion on them. For a developer wanting to run things locally before committing to configuring (and paying for!) a full cluster out on AWS, it was daunting.</p>

<p>Luckily for me, <a href="https://github.com/charlesflynn">Charles Flynn</a> has created a neat repo on Github at <a href="https://github.com/charlesflynn/agiledata">charlesflynn/agiledata</a>. It builds a local development VM for the Agile Data Science book, with all the dependencies installed and the book&#8217;s code in the right place to run. With that project, I was able to get up and running with the project quickly and found it useful to not have to sink anymore time into configuring Hadoop. I&#8217;d like to give another shout-out to Charles for this great resource and the work done to make sure it works.</p>

<p>The book has the reader work with email data: your Gmail inbox pulled locally for analyzing. I thought this was neat, in itself. Many data science tools use free datasets; as a result working with those datasets may not be the most interesting problem space to you. But insights about your own communication and how others communicate with you is something you might find more interesting.</p>

<p>After explaining Hadoop, Pig, and a few other tools, the rest of the book follows a fairly lightweight &#8220;recipe&#8221; format. Each chapter explains the goal and how it fits in an &#8220;agile data science&#8221; workflow. Then, some code is presented, and then we see what kinds of results we can take from that step. Once this pattern is set up, the book moves fairly quickly through some rather interesting data wrangling. By the end, the reader has built several data analysis scripts and a simple web app put together with MongoDB, Python Flask, and D3.js graphs to display all the results.</p>

<p>At times, though, the quick recipe format seemed to explain too little. There was little explanation of how Pig script syntax worked or how to understand what was going on under the covers. What this book is not: an exhaustive guide to how to write Pig scripts, how to pick approaches to analyzing a dataset, or how to compose these systems in production in the wild.  Also missing were any mention of performance tuning or what other algorithms might be considered.</p>

<p>Which seems like an awful lot to be missing, but for this book that would have been diversions that bogged the book down.</p>

<p>To the author&#8217;s benefit, I finished the book, and finished it far faster than I expected I would. I cam away having done almost all of the book&#8217;s examples (helped a great deal by the excellent virtual machine repo from Charles Flynn mentioned above). And, I had a deeper understanding and respect for tools that I&#8217;d never used before.</p>

<h2>Final thoughts</h2>

<p>When it comes down to it, I wouldn&#8217;t recommend Agile Data Science to read on its own. I&#8217;d recommend that you used it as a quick introductory book to build familiarity and confidence, so that you could dive into a deeper resource afterwards. I&#8217;d also recommend it if you&#8217;re a developer who isn&#8217;t going to be doing data science as your full time job but are curious about the tools and practices, this book would be a good read.</p>

<h2>What I&#8217;m doing next</h2>

<p>Almost immediately after finishing this book, I attended an event at a nearby college to talk about <a href="http://storm.incubator.apache.org/">Apache Storm</a>. Our company blog <a href="http://bendyworks.com/geekville/articles/2014/2/uw-big-data-event-presents-storm">covered the event</a> if you&#8217;re curious.</p>

<p>Storm is a tool that came out of Twitter for processing streams of big data. If you think about it, Twitter has one of the biggest streaming data sets ever. They need to use that streaming data for everything from recommendations to analytics to top tweet/hashtag rankings.</p>

<p>After attending the event and having run a word-counting topology (Storm&#8217;s term for a workflow that may contain many data-processing jobs) out on a cluster, I began to see the potential of using Storm.</p>

<p>Plus, Storm is far friendlier to local development on a laptop. One can run it with a simple command line tool or even from inside your Java or Clojure code. Or, perhaps most simply, from inside the Clojure REPL.</p>

<p>The other plus here is that Storm is mostly written in Clojure and has a full Clojure API. Combined with a few other Clojure tools that I prefer, like <a href="http://www.datomic.com/">Datomic</a>, <a href="https://github.com/ring-clojure/ring">Ring</a>, and <a href="http://keminglabs.com/c2/">C2</a>, I can see a toolset similar to that used in Agile Data Science. This toolset has the benefit of using the same language for everything. And, Clojure is already well-suited for data manipulation and processing.</p>

<p>So I began to rewrite the examples in Agile Data Science in Clojure. I am hoping to make enough progress to begin posting some of the code with explanations in blog format. Stay tuned for that.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A theory of compound intelligence gain]]></title>
    <link href="http://blog.mattgauger.com/blog/2014/01/12/a-theory-of-compound-intelligence-gain/"/>
    <updated>2014-01-12T14:02:00-06:00</updated>
    <id>http://blog.mattgauger.com/blog/2014/01/12/a-theory-of-compound-intelligence-gain</id>
    <content type="html"><![CDATA[<p>Note that this is probably not enough to call a theory. It&#8217;s an idea, at most.</p>

<p>I&#8217;m currently reading the book <a href="http://www.amazon.com/gp/product/0984725113">Race Against the Machine</a>, which describes how increasing levels of automation by technology are related to capital and labor. But this post isn&#8217;t about that book. It simply triggered me to think about my motivations for my current side projects, and how I might explain to others why exactly I think that my current side projects are so important.</p>

<p>While <em>Race Against the Machine</em> describes technological progress as a force that leaves behind skilled workers who no longer have relevant skills, my thinking is on intelligence augmentation, and how I can use my own knowledge and programming skills to build tools that increase my own effectiveness and ability to perform my job. Namely, how can I write software that improves my cognition and memory such that I am better at writing software, and gain other benefits from having increased cognition and memory?</p>

<p>Douglas Engelbart <a href="http://www.dougengelbart.org/pubs/augment-3906.html">wrote extensively</a> about augmenting intelligence, primarily with improving workflows and then with computer software. I&#8217;ve previously <a href="http://blog.mattgauger.com/blog/2013/03/17/by-augmenting-human-intellect/">quoted him</a> on this blog. I feel that part of that quote bears repeating here:</p>

<blockquote>
By &#8220;augmenting human intellect&#8221; we mean increasing the capability of a man to approach a complex problem situation, to gain comprehension to suit his particular needs, and to derive solutions to problems.
<footer>
<strong>Douglas C. Engelbart</strong>
&ndash;
<cite><a href="http://www.dougengelbart.org/pubs/augment-3906.html">Augmenting Human Intellect: A Conceptual Framework </a></cite>
</blockquote>


<p>Of course, Engelbart was writing about this in 1962 &#8211; well before every home had a personal computer and everyone had a powerful supercomputer in their pocket. For a modern overview of Engelbart&#8217;s framework, see <a href="http://fluid.media.mit.edu/sites/default/files/The%20Design%20of%20Artifacts%20for%20Augmenting%20Intellect.pdf">The Design of Artifacts for Augmenting Intellect</a>.</p>

<p>My earliest encounters with concepts of intelligence augmentation most likely come from science fiction. One character that has inspired a lot of my work (and that I&#8217;ve probably told you a lot about if we&#8217;ve discussed this project in person) is Manfred Macx from Charles Stross&#8217;s <a href="http://www.antipope.org/charlie/blog-static/fiction/accelerando/accelerando.html">Accelerando</a>. Macx is described in the early parts of the book as having a wearable computer that acts as his <em>exocortex</em>. The idea of an exocortex being that some part of his memory, thinking, and information processing lives outside of his head and on the wearable computer. Similarly, the exocortex can help act as a gate to his attention, which is one of our limited resources.</p>

<p>If you think about it, just as <a href="http://www.ted.com/talks/amber_case_we_are_all_cyborgs_now.html">we are all cyborgs now</a> by virtue of the technology we use every day, we are also all on our way to having exocortexes. Many of us use Gmail filters to protect our attention spans from email we receive but don&#8217;t always need to read. Or we use Google search to add on to our existing memory, perhaps to remember some long-forgotten fact that we only have an inkling of.</p>

<p>I&#8217;ve had Manfred Macx&#8217;s exocortex (and other flavors of science fiction&#8217;s wearable computers and augmented intelligences) kicking around in my head for years. Gmail tells me that I was trying to plan the architecture for such a thing as far back as 2006. It&#8217;s taken a lot of thinking and further learning in my career to even get to the point where I felt ready to tackle such a project.</p>

<p>What I am setting out to build is an exocortex of my own design, under my own control. Not something that is handed to me by Google in bits and pieces. And to do so, it turns out, requires a lot of research and learning. There&#8217;s tons of research on the topics of proactive autonomous agents, text classification, and wearable computing that I have been reading up on. Just to build the first phase of my project, I have been learning all of the following:</p>

<ul>
<li><a href="https://github.com/clojure/core.logic">core.logic</a> (which is based on Prolog, so I&#8217;m learning some Prolog now, too)</li>
<li><a href="https://github.com/clojure/core.async">core.async</a> (Clojure&#8217;s implementation of C.A.R. Hoare&#8217;s <a href="http://www.amazon.com/Communicating-Sequential-Processes-International-Computing/dp/0131532715/">Communicating Sequential Processes</a>, which is also how Go&#8217;s goroutines work)</li>
<li><a href="http://cascalog.org/">Cascalog</a> and <a href="http://hadoop.apache.org/">Hadoop</a>, to do my distributed computing tasks</li>
<li><a href="http://www.datomic.com/">Datomic</a> &amp; Datalog (a subset of Prolog for querying Datomic), to store knowledge in a historical fashion that makes sense for a persistent, lifelong knowledge system</li>
<li>Topic clustering, text classification, and other natural language processing approaches</li>
<li>Data mining, and in particular, streaming data mining of large datasets on Hadoop clusters, by reading the Stanford textbook <a href="http://infolab.stanford.edu/~ullman/mmds.html">Mining of Massive Datasets</a></li>
<li>Generally learning Clojure and ClojureScript better</li>
<li>and probably more that I am forgetting to mention</li>
</ul>


<p>Of course, if I look at that list, I can be fairly certain that this project is already paying off. These are all things that I had very little experience with before, and very little reason to dig into so deeply. Not represented here are the 40 or so academic papers that I identified as important, and seriously set out to read and take notes on &#8211; again, probably learning more deeply these topics than I otherwise would have.</p>

<p>Which brings me to this theory, the idea of this post: That by even beginning to work on this problem, I&#8217;m seeing some gains, and that any tools I can build that give me further gains will only compound the impact and effectiveness. <strong>Improving cognition and learning compounds to allow further gains in cognition and learning.</strong></p>

<p>There&#8217;s some idea in the artificial intelligence community that we don&#8217;t need the first general artificial intelligence to be built as a super-intelligence; we need only build an artificial intelligence that is capable of improving itself (or a new generation of artificial intelligence.) As each generation improves, such intelligences could become unfathomably intelligent. But all it takes is that first seed AI that can improve the next.</p>

<p>So for improving our own human intelligences, we may not need to build a single device up-front that makes us massively intelligent. We only need take measures to improve our current knowledge and cognition, to build tools that will help us improve further, and continue down this path. It will definitely not be the exponential gains predicted for AI, and may not be even linear &#8211; that is, the gains in cognition from building further tools and learning more may plateau. But there will be improvements.</p>

<p>For that reason, I&#8217;m not setting out to build Manfred Macx&#8217;s exocortex from the beginning. Instead, I have been building what I describe as a &#8220;Instapaper clone for doing research&#8221; &#8211; a tool that, if it improves my existing ability to research and learn new topics, could pay off in helping me to build the next phase of my projects.</p>

<p>Of course, at the same time, I have an eye towards using the foundation of this tool as the datastore and relevance-finding tool for the overall project. Such a tool can automatically go and find related content &#8211; either things I have read, or simply crawl related content on the web. Eventually, this tool will also ingest all of the information I interact with on a daily basis: every website I browse, every email I receive, every book that I read. A searchable, tagged, annotatable reference with full metadata for each document as an external long-term memory. But this is all a topic for another post.</p>

<p>This, in concert with what current research tells us is effective: <a href="http://www.salon.com/2013/12/29/sciences_obsession_the_search_for_a_smart_pill/">improved nutrition and supplementation, exercise, meditation, and N-back training</a>, may just be my ticket to higher levels of human intelligence. But for now, I just want the early-adopter edge. I want to see how far I can push myself on my own skills. Some large corporation may be able to field hundreds of developers to create a consumer product for the public that benefits everyone in similar ways &#8211; but I might be able to do this for myself years ahead of that. And wouldn&#8217;t that be cool?</p>

<p>And this is where I call it a theory: it could very well be that there&#8217;s no such thing as compounding interest on intelligence. Only time and my own experiences with this project will tell me.</p>

<p>If you&#8217;ve made it this far and you&#8217;re interested in this kind of stuff, that is: intelligence augmentation, wearable computing, autonomous proactive agents, etc., <a href="https://twitter.com/mathiasx">get in touch</a>. There doesn&#8217;t seem to be much of an online community around these topics, and I&#8217;d like to start creating one for discussion and organizing open source projects around these topics.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An (unscientific) study in behavior change with software]]></title>
    <link href="http://blog.mattgauger.com/blog/2013/12/28/an-unscientific-study-in-behavior-change-with-software/"/>
    <updated>2013-12-28T08:54:00-06:00</updated>
    <id>http://blog.mattgauger.com/blog/2013/12/28/an-unscientific-study-in-behavior-change-with-software</id>
    <content type="html"><![CDATA[<p>Forming habits is hard. There&#8217;s been tons of research on what practices help form new habits successfully. And there has been research on what software can do to help form new habits. It&#8217;s not enough to simply send daily reminders or keep track of the goals in a visible place. For software to help us form new habits successfully, we must look to the current research for clues as to how habits are formed.</p>

<p>Over the past year or so, I&#8217;ve been trying to adopt a habit to take Vitamin D every morning. I&#8217;ve been largely successful, which I think is partly due to the software I used. I use <a href="http://lift.do">Lift</a> on my iPhone, which sends me emails every morning as a reminder. The app itself has checkins for each habit, progress charts, and social features. Most mornings, I wake up, swipe away the reminder email, and take my morning antihistamine and a Vitamin D. <a href="#behavior-footnote-1" name="behavior-footnote-1-return">[1]</a> Like I said, I&#8217;ve been mostly successful, and at this point, I&#8217;ve taken Vitamin D every day in a row for 442 days in a row. <a href="#behavior-footnote-2" name="behavior-footnote-2-return">[2]</a>  Granted, taking a vitamin every morning is only a small change, but it is one that I wanted to accomplish and did. Small successes add up to bigger successes, and this gives me confidence that if I set out to make a bigger change in my life, I have a toolset that will help me to accomplish that goal.</p>

<p>So what does the research say helps us form successful habits? The Fogg Method <a href="#behavior-footnote-3" name="behavior-footnote-3-return">[3]</a> is one of the more well-known systems, and suggests that a way to be successful is to:</p>

<ol>
<li>Select the right target behavior.</li>
<li>Make the target behavior easy to do.</li>
<li>Ensure a trigger will prompt the behavior.</li>
</ol>


<p>So what do each of these steps tell us?</p>

<h2>The Right Target Behavior</h2>

<p>It&#8217;s hard to be successful in picking up a habit that you don&#8217;t already want to accomplish. Some things you may already want to do include things like learning a language, eating a specific diet, or flossing your teeth. It goes without saying that things you&#8217;d rather not do are going to be harder to implement.</p>

<p>But there&#8217;s another factor in play here that I think determines the <strong>right</strong> target behavior: simplicity. That is, is the habit a simple task to accomplish, or is it something complex and unmanageable? Can you perform one simple task per day and call it &#8220;done&#8221;, or is it more complicated as to whether it is &#8220;done&#8221; or not each day? The simple &#8220;done&#8221; state seems really important, and so it is good to focus on using this technique for binary actions: either you did them today, or you didn&#8217;t. Things that must be done with complicated schedules, every other day, or once a week, will be much harder to establish as habits.</p>

<h2>Easy to do</h2>

<p>One reason we want a simple target behavior is so that it is easy for us to add to our schedule. You may have a goal of exercising more. But &#8220;exercising more&#8221; doesn&#8217;t have a binary action associated with it; for example: what is &#8220;more&#8221;? Instead, you might say, &#8220;I want to exercise 45 minutes per day.&#8221; And that would be a much better goal. But if exercising means you have to drive to the gym, and the gym is out of your way each day, it might be very unlikely that you will do it. This is not a simple target behavior.</p>

<p>If you do have some goal that may not be simple to implement at first &mdash; say, the example of having to drive out of your way to the gym &mdash; instead try to find a simpler version of the habit that you can adopt first. You may decide instead to just do some bodyweight exercises before you leave for work each morning. Decide on the exercises and write them down. Either you did them or you didn&#8217;t. Later on, you can modify this existing habit to be more exercise, but for now, focus on what you can reasonably adopt as a simple habit.</p>

<p>The other concern in implementing an &#8220;easy&#8221; habit is how much time the new habit will take. In the above example, the initial goal was something like 45 minutes per day. Eventually, you could probably find when you exercise best and are least likely to schedule appointments (say, early morning or late at night), and actually implement that goal. But early on, it&#8217;s going to be hard to change your schedule for your new habit. I ran into this frequently while trying to find time after 5PM but before dinner to practice guitar. It didn&#8217;t help that after-work and dinnertime are frequently scheduled as social events, and that I have a habit of staying at the office past 5; all these added up to very little success in trying to spend 45 minutes to an hour practicing guitar at home after work.</p>

<h2>Triggers</h2>

<p>The last step is quite important. Where you might think of triggers as things like alerts on your phone or daily emails from a service like <a href="http://lift.do">Lift</a>, I didn&#8217;t find those kinds of prompts very effective in helping me adopt a habit.</p>

<p>To be more likely to perform some task on any given day, look at the habits you already have. I&#8217;ve been taking an antihistamine every morning since I was about 12; this has been a constant in my life and part of my routine for a very long time. Since I already have this daily habit, I added taking Vitamin D every morning to that habit. Other habits with no daily routine to hinge off of, like practicing guitar, were much harder to make stick.</p>

<p>Flossing is an easy addition to brushing your teeth every night, and just took enough of me making it simpler (finding a brand of flossers I liked rather than wrangling loose floss) and doing it enough times before it stuck, too.</p>

<h2>What didn&#8217;t work for me?</h2>

<p>As noted above, despite a couple attempts to really make daily guitar practice stick, I&#8217;ve never been able to tackle that habit. There were no good triggers that I could add the event on to, and I frequently didn&#8217;t have time for what I was trying to accomplish. If I were to go back to trying to focus on guitar, I&#8217;d probably start with much less time commitment, and schedule it some time when I&#8217;m very likely to be home and have 5-10 minutes, like early in the morning before work. Whether or not guitar practice is effective with my first cup of coffee would have to be tested, of course.</p>

<p>What I&#8217;ve found is that I&#8217;m partially motivated by progress bars and graphs, though, and so I will make time in my day for easy-to-accomplish things. So when I can, I will try to squeeze in some mundane activity I&#8217;m tracking in Lift, like washing the dishes. <a href="#behavior-footnote-4" name="behavior-footnote-4-return">[4]</a></p>

<p>The social component of Lift, on the other hand, doesn&#8217;t really help me any. For others, it might be a good motivator. In cycling, I have several local friends, including one local cyclist who is quite prolific and who frequently rides 10x as much as I do in a given week. We all use <a href="http://www.strava.com/">Strava</a> to track our cycling, and the social component alerts me to new rides that the prolific cyclist has done. Seeing that cyclist&#8217;s rides helps remind me to get out and enjoy more cycling, as well as sets up a nice carrot-on-a-stick for me to ride more to &#8220;catch up.&#8221; In that case, the social features definitely help me to perform an action more, but I wouldn&#8217;t really call cycling a habit as much as my transportation and leisure-time hobby that I can do whenever I have time.</p>

<p>Habits with no simple binary action and no triggers, such as creative acts, are especially hard to form as habits. I have tracked writing blog posts in Lift for some time, but since I only write blog posts when the mood strikes me, it is hardly a daily goal, and it would be difficult for me to implement the above steps to form an actual habit of blogging on a daily basis.</p>

<h2>Final thoughts</h2>

<p>Notice that most of the guidelines above have very little to do with software? Software itself can&#8217;t convince you to go to the gym or make you more likely to floss. But it can provide some prompts and some encouragement, and that might be enough to get you over the hurdle of adopting a new habit.</p>

<p>As with anything, you are an individual and your mileage may vary. Experiment, use an app like Lift or something else you prefer to track your progress, and see where it takes you.</p>

<p>There&#8217;s more resources out there to help understand forming new habits, self-control, and behavior change, but I feel like this is the baseline one needs to know to be more successful in implementing behavior change. Some references of note that I have been consuming:</p>

<ol>
<li><a href="http://shop.oreilly.com/product/0636920030201.do">Designing for Behavior Change</a>. Stephen Wendel. 2013.</li>
<li><a href="http://www.nytimes.com/2011/09/04/books/review/willpower-by-roy-f-baumeister-and-john-tierney-book-review.html?pagewanted=a0l&amp;_r=0">The Sugary Secret of Self-Control</a>. New York Times. September 2, 2011.</li>
<li><a href="http://pragprog.com/book/jkthp/the-healthy-programmer">The Healthy Programmer</a>. Joe Kutner. 2013.</li>
</ol>


<p>If you&#8217;re interested in some research, the above book (Designing for Behavior Change) is a good reference, as well as these papers:</p>

<ol>
<li><a href="http://dspace.mit.edu/handle/1721.1/79306">ReflectOns : mental prostheses for self-reflection</a> (hardware and software solutions)</li>
<li><a href="http://captology.stanford.edu/wp-content/uploads/2010/10/Fogg-and-Hreha-BehaviorWizard.pdf">Behavior Wizard: A Method for Matching Target Behaviors with Solutions</a></li>
</ol>


<hr />

<p><a name="behavior-footnote-1"></a></p>

<p><strong>1</strong> Yes, I&#8217;m aware of the fact that taking vitamins with an antihistamine decreases the effectiveness of the antihistamine. I&#8217;ll cover why I take them at the same time in this post. <a href="#behavior-footnote-1-return">&#8617;</a></p>

<p><a name="behavior-footnote-2"></a></p>

<p><strong>2</strong> You can view my progress on Lift <a href="https://lift.do/users/34b3bcceda0808f3c096">on my public profile</a>. Notice there&#8217;s quite a few habits I&#8217;ve tried to form with Lift in the past that didn&#8217;t quite work. <a href="#behavior-footnote-2-return">&#8617;</a></p>

<p><a name="behavior-footnote-3"></a></p>

<p><strong>3</strong> As described by BJ Fogg in the preface to <a href="http://shop.oreilly.com/product/0636920030201.do">Designing for Behavior Change</a>. <a href="#behavior-footnote-3-return">&#8617;</a></p>

<p><a name="behavior-footnote-4"></a></p>

<p><strong>4</strong> We don&#8217;t have a dishwasher in our current apartment, and I both dislike dirty dishes and dislike washing dishes by hand. <a href="#behavior-footnote-4-return">&#8617;</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[In the year 2100]]></title>
    <link href="http://blog.mattgauger.com/blog/2013/12/16/in-the-year-2100/"/>
    <updated>2013-12-16T23:41:00-06:00</updated>
    <id>http://blog.mattgauger.com/blog/2013/12/16/in-the-year-2100</id>
    <content type="html"><![CDATA[<p>Recently I was asked by a coworker to write up some ideas for where our company would be in the future. Not just next year, or in 5 years, but where we saw the company in the year 2100. For my other coworkers, the year 2100 probably represents far enough out to ensure they stop thinking in the constraints of right now. But for someone who has read as much science fiction as I have, I saw a wide gulf of time.</p>

<p>So I hit up Wolfram Alpha, asking myself what technology might look like in the year 2100.</p>

<p>If Moore&#8217;s Law holds, then processors could contain 3.5 x 10<sup>22</sup> transistors &mdash; roughly 350 times more transistors than the number of grains of sands on the planet. (Thanks, Wolfram Alpha!) This also represents roughly 2.9x10<sup>18</sup> MIPS per chip, which is roughly a factor of ten more processing power in each chip than all 7 billion brains of humans on the planet, combined. That kind of computing power is almost unimaginable to me now.</p>

<p>While I don&#8217;t have a religious belief in the Singularity, I <strong>do</strong> think that we can&#8217;t really predict what it&#8217;ll mean to have so much computing power available to us. Or what technology, society, or people will look like by then. Of course, someone&#8217;s gotta write the software to make that hardware usefulâ€¦</p>

<hr />

<p><small>
Note: It could be that I messed up these numbers a bit; I went off the current transistor count and MIPS for the Intel i7-4770k processor, since I recently started putting together a server with one. And the numbers are extrapolated out quite a bit. If you&#8217;ve got corrections to these numbers, hit me up on <a href="https://twitter.com/mathiasx">Twitter</a> to let me know!
</small></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Indent and colorize HTML strings in pry]]></title>
    <link href="http://blog.mattgauger.com/blog/2013/11/14/indent-and-colorize-html-strings-in-pry/"/>
    <updated>2013-11-14T11:32:00-06:00</updated>
    <id>http://blog.mattgauger.com/blog/2013/11/14/indent-and-colorize-html-strings-in-pry</id>
    <content type="html"><![CDATA[<hr />

<p><em>(This post is part of my blog archiving project. This post appeared on <a href="https://coderwall.com/p/hlbana">Coderwall</a> on November 14, 2013.)</em></p>

<p><em>Note: I have converted the inline code to Gists for better readabililty.</em></p>

<hr />

<p>An issue I run into frequently while testing with tools like <a href="https://github.com/jnicklas/capybara">capybara</a> by dropping into <a href="http://pryrepl.org/">pry</a> is that the last response for a page is a single string, containing the HTML that was rendered. But those string have lost indentation and generally make it really hard to see the content of the page, or whatever you care about.</p>

<p>For example, a simple login page might look like:</p>

<script src="https://gist.github.com/mathias/2007dab63a9fe77d7182.js"></script>


<p>Wouldn&#8217;t it be great if Pry could re-indent and colorize that string of HTML for you? Well, I put together a quick little Pry command that does. Throw this into your <code>~/.pryrc</code>:</p>

<script src="https://gist.github.com/mathias/21a971d0bdb3620a8909.js"></script>


<p>Originally, I had tried to use the html5 fork of the <code>tidy</code> command: <a href="https://github.com/w3c/tidy-html5">https://github.com/w3c/tidy-html5</a> but that tool <em>changes</em> the HTML as it parses it, and spits out a bunch of warnings. So instead, I have this pry command use <code>nokogiri</code> when it is available. The command should warn you if you try to use it without <code>nokogiri</code> available. What is output should be very close to the original rendered HTML, just cleaned up and re-indented.</p>

<p>So what does it look like in action?</p>

<script src="https://gist.github.com/mathias/4065f861db4cd9e280ad.js"></script>


<p>(imagine that pry has colorized this output, too, through the excellent CodeRay tool.)</p>

<p>I&#8217;d love to hear from you if you find this useful! Or even if you don&#8217;t find it useful, but have some suggestions to improve it. Thanks!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apprentice Talk Video &amp; Notes]]></title>
    <link href="http://blog.mattgauger.com/blog/2013/11/11/apprentice-talk-video-and-notes/"/>
    <updated>2013-11-11T19:22:00-06:00</updated>
    <id>http://blog.mattgauger.com/blog/2013/11/11/apprentice-talk-video-and-notes</id>
    <content type="html"><![CDATA[<p>Back in September, I had a blast speaking at <a href="http://nickelcityruby.com/">Nickel City Ruby</a>. My talk was entitled &#8220;Apprenticeship: Software Craftsmanship&#8217;s Missing Link&#8221; and included a lot of slides of sasquatches. The video has been posted to Confreaks, so I&#8217;m embedding it here. Also note that I have posted my notes and a few resources over on the microsite I created for this talk, <a href="http://blog.mattgauger.com/apprenticeship/">http://blog.mattgauger.com/apprenticeship/</a></p>

<iframe width="640" height="360" src="http://blog.mattgauger.com//www.youtube.com/embed/zuL7rAwmwCY" frameborder="0" allowfullscreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git fml]]></title>
    <link href="http://blog.mattgauger.com/blog/2013/09/03/git-fml/"/>
    <updated>2013-09-03T11:32:00-05:00</updated>
    <id>http://blog.mattgauger.com/blog/2013/09/03/git-fml</id>
    <content type="html"><![CDATA[<hr />

<p><em>(This post is part of my blog archiving project. This post appeared on <a href="https://coderwall.com/p/ypsd8w">Coderwall</a> on September 3, 2013.)</em></p>

<hr />

<p>For when you need to go back to a clean slate and declare FML, add this to your <code>~/.gitconfig</code>:</p>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class=''><span class='line'>[alias]
</span><span class='line'>  fml = !"git fetch && git reset --hard origin/master"</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A simple text editor foot pedal]]></title>
    <link href="http://blog.mattgauger.com/blog/2013/08/06/a-simple-text-editor-foot-pedal/"/>
    <updated>2013-08-06T15:06:00-05:00</updated>
    <id>http://blog.mattgauger.com/blog/2013/08/06/a-simple-text-editor-foot-pedal</id>
    <content type="html"><![CDATA[<p>When I first starting talking about <a href="http://blog.mattgauger.com/blog/2013/08/03/building-a-chording-keyboard-lessons-learned-and-progress-so-far/">building a chording keyboard</a>, both in person and online, people began to ask me about the possibility of building a computer foot pedal. With the Teensy microcontroller, a foot pedal would only need to watch a single digital input and output a few characters to the OS; much simpler than my chording keyboard project.</p>

<h2>Commercial products</h2>

<p>There are quite a few commercial products you can buy. They come with their own caveats:</p>

<ul>
<li><a href="https://www.kinesis-ergo.com/products/#foot-section">Kinesis</a> makes several, but they can only be programmed on Windows. They are also very expensive.</li>
<li>The <a href="http://www.xkeys.com/xkeys/xkfoot.php">Xkeys Foot Pedals</a> look good, but they are also expensive.</li>
<li>The DealExtreme <a href="http://dx.com/p/usb-triple-action-foot-switch-keyboard-control-foot-pedal-56508">Triple Action Foot Pedal</a> provides three buttons and is relatively cheap; however, the reviews I&#8217;ve read say the reliably is poor. This product can only be programmed on Windows.</li>
</ul>


<h2>Building the foot pedal</h2>

<p>My first idea for a foot pedal was to use DIY guitar pedal hardware. Such guitar pedals have nice, sturdy aluminum project boxes, robust foot switches, and look pretty good. But the ergonomics of such a pedal worried me: while a guitarist momentarily stomps on guitar pedals to turn them on or off while standing, a programmer would likely be tapping and/or holding a foot pedal for long periods of time, most likely from a seated position.</p>

<p><img src="http://blog.mattgauger.com/images/guitar_pedal_true_bypass_looper.JPG" alt="true bypass looper" style="display: block; margin: 0 auto;" /></p>

<p>Such a pedal would look something like the above, but with a USB cable coming out of it.  If you wish to use guitar pedal hardware, I suggest checking out <a href="http://www.mammothelectronics.com/">Mammoth Electronics</a>. (I receive no compensation for mentioning them; I have been a happy customer for several years.) For a two-to-three switch foot pedal, I suggest the 1590BB enclosures, and Mammoth can drill them in several ways for you.</p>

<p>My coworker <a href="http://sencjw.com/">Chris Wilson</a> suggested that I try a digital piano foot switch. These are relatively cheap and extremely sturdy. I picked up an <a href="http://www.amazon.com/M-Audio-Sustain-Pedal-Action-Keyboards/dp/B00063678K/">M-Audio Sustain Pedal</a> from Amazon for about $17.</p>

<p>The sustain pedal is designed to plug into a digital piano, so it has a 1/4&#8221; audio plug on its cable. In the past, I&#8217;ve built a lot of guitar effects pedals and some amps, and so I have a lot of 1/4&#8221; jacks around.</p>

<p>The wiring is simple: The Teensy (and most Arduinos) can do input pullup resistors for us. I mocked up the circuit with a little breadboard (ignore the weird angle of the Teensy here; it was required to get the pins into this small breadboard.) I downloaded some example button code to the Teensy and verified that it was working.</p>

<p><a href="http://www.flickr.com/photos/mattgauger/9454682228/" title="IMG_1897 by Matt Gauger, on Flickr"><img src="http://farm4.staticflickr.com/3725/9454682228_4bb073ea47_z.jpg" width="480" height="640" alt="IMG_1897" style="display: block; margin: 0 auto;" /></a></p>

<p>To assemble, we simply solder a digital IO pin to one side of the 1/4&#8221; jack, and the other wire gets soldered to ground pin. My button is going to be connected on pin 9.</p>

<p>I had a small project box, much bigger than the Teensy really needed, but suitable for the job. I used my Dremel to cut a round hole for the 1/4&#8221; jack, and a rectangular slightly bigger than the mini-USB cable plug for our USB cable.</p>

<p><a href="http://www.flickr.com/photos/mattgauger/9451903305/" title="IMG_1898 by Matt Gauger, on Flickr"><img src="http://farm4.staticflickr.com/3789/9451903305_4c6a3e0c35_z.jpg" width="480" height="640" alt="IMG_1898" style="display: block; margin: 0 auto;" /></a></p>

<p>Test fitting the Teensy in the project box:</p>

<p><a href="http://www.flickr.com/photos/mattgauger/9451906889/" title="IMG_1900 by Matt Gauger, on Flickr"><img src="http://farm4.staticflickr.com/3718/9451906889_8e5624fa7d_z.jpg" width="640" height="480" alt="IMG_1900" style="display: block; margin: 0 auto;" /></a></p>

<p>Lastly, I used some velcro inside to attach the Teensy to the project box. All done with assembly!</p>

<p><a href="http://www.flickr.com/photos/mattgauger/9451907469/" title="IMG_1902 by Matt Gauger, on Flickr"><img src="http://farm8.staticflickr.com/7451/9451907469_e6e6fc661f_z.jpg" width="480" height="640" alt="IMG_1902" style="display: block; margin: 0 auto;" /></a></p>

<p>The next step is to program the Teensy to send the key events we want. In this case, my coworker <a href="https://twitter.com/losingkeys">Josh</a> suggested a vim clutch that enters insert mode when you press down on the pedal, and leaves insert mode when you release it. Since the Teensy&#8217;s Button class detects both button press and button release events, we can write code to do that.</p>

<p>Here&#8217;s what the code looks like:</p>

<script src="https://gist.github.com/mathias/6168386.js"></script>


<p>(You can find the code in my chording keyboard repo on Github <a href="https://github.com/mathias/chording/blob/master/teensy/foot_pedal/foot_pedal.ino">here</a>.)</p>

<p>There are, of course, a few gotchas that I ran into:</p>

<p>The <code>KEY_ESC</code> constant that is referenced by the <a href="http://arduino.cc/en/Reference/KeyboardModifiers">Arduino documentation</a> didn&#8217;t work. Similarly, sending the hex value and character code didn&#8217;t work. I couldn&#8217;t find anything online that suggested that the Mac has some different ASCII character for the Escape key, so I had to find another way to leave insert mode.</p>

<p>With the Arduino&#8217;s Keyboard class, we can build up a key combo by calling <code>Keyboard.press</code> for each character in the combo, and then finally calling <code>Keyboard.releaseAll</code> when we&#8217;re ready to send the key combo to the computer. Since vim also has <code>Ctrl-[</code> as a way of leaving insert mode, I created that key combo on lines 34-36.</p>

<p>Of course, this code could be made to be even more robust by guarding against, say, inserting an <code>i</code> character when you are already in insert mode. Most likely, you&#8217;d send Ctrl-[ (and move building the key combo to a function we can reuse) and then send vim the command <code>:startinsert</code>.  I&#8217;ll leave implementing the more robust solution as an exercise for the reader.</p>

<h2>Final thoughts</h2>

<p>Does it work? I used it while writing this blog post, but I must admit, I have a strong natural reflex to hit ESC to leave insert as soon as I finish typing a word or sentence. However, when consciously trying, it is quite natural to use the foot pedal to enter/leave insert mode. One downside I found was that the Ctrl-[ combo seems to back up the cursor one character, which can be annoying.</p>

<p>For my personal use, I am thinking about mapping the key it sends to <code>Left-Alt</code> so that I can use the footpedal while in emacs&#8217; Org Mode and not have to move my left hand down to hit Alt with my ring finger every time I want to adjust a heading or start a new heading.</p>

<p>Overall, this pedal is much cheaper than the high-end pedals mentioned above. The total cost came to around $37, because I had some of the parts on hand. Further, you can upload new code to the Teensy on all operating systems, a big win over the Windows-only pedals above.</p>

<p>However, this pedal only has one foot switch. You could easily add more M-Audio sustain pedals to the design, and keep adding 1/4&#8221; jacks to a project box. The Teensy has plenty more IO lines to use! Or you could go for it all in one enclosure with the guitar pedal hardware.</p>

<p><a href="http://www.flickr.com/photos/mattgauger/9451908041/" title="IMG_1903 by Matt Gauger, on Flickr"><img src="http://farm4.staticflickr.com/3780/9451908041_c8446aa3e7_z.jpg" width="480" height="640" alt="IMG_1903" style="display: block; margin: 0 auto;" /></a></p>

<hr />

<p>If you have any questions or comments, I&#8217;d love to hear about it over on Twitter, where I am <a href="https://twitter.com/mathiasx">@mathiasx</a>.</p>

<h3>Research:</h3>

<ul>
<li><a href="http://hackaday.com/2012/06/21/building-a-clutch-for-vim/">Hackaday: Building a clutch for vim</a></li>
<li><a href="http://arduino.cc/en/Reference/KeyboardModifiers">Arduino Keyboard modifiers</a></li>
<li><a href="http://www.emacswiki.org/emacs/FootSwitches">Emacs Wiki: Foot Swtiches</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a chording keyboard: progress so far]]></title>
    <link href="http://blog.mattgauger.com/blog/2013/08/03/building-a-chording-keyboard-lessons-learned-and-progress-so-far/"/>
    <updated>2013-08-03T08:21:00-05:00</updated>
    <id>http://blog.mattgauger.com/blog/2013/08/03/building-a-chording-keyboard-lessons-learned-and-progress-so-far</id>
    <content type="html"><![CDATA[<p>Chording keyboards have been a computing peripheral for a long time. They&#8217;ve been in use at least since Douglas Engelbart gave what is known as <a href="http://www.youtube.com/watch?v=yJDv-zdhzMY">The Mother of all Demos</a> in 1968. Rather than try to sum up the history and potential of the device here, I recommend you read the excellent essay <a href="http://www.loper-os.org/?p=861">Engelbart&#8217;s Violin</a> by Stanislav Datskovskiy on loper-os.org</p>

<p><img src="http://blog.mattgauger.com/images/engelkey.jpg" alt="Engelbart's chording keyboard in use" /></p>

<p><cite>Image via <a href="http://research.microsoft.com/en-us/um/people/bibuxton/buxtoncollection/detail.aspx?id=7">http://research.microsoft.com/en-us/um/people/bibuxton/buxtoncollection/detail.aspx?id=7</a></cite></p>

<p>I&#8217;ve always had an interest in building hardware. When I was younger, I dreamed of building robots some day that I could interact with, play games with, or maybe go to space with. Someday I hope that I&#8217;ll get that chance. But in the meantime, I&#8217;ve built all sorts of hardware, and I&#8217;ve always been interested in the low-level side of computing.</p>

<p>At <a href="http://bendyworks.com">Bendyworks</a> right now, we have flurry of activity and interest focusing on low-level computing, digital logic, and hardware. We&#8217;ve had several discussions in off-hours about learning computing from first principles: digital logic, circuit design, and taking that knowledge to the point of designing and building CPUs and then computers around those novel CPUs. There&#8217;s interest in the <a href="http://arduino.cc/en/">Arduino</a> and some of my coworkers are taking the so-called <code>nand2tetris</code> course: <a href="http://www.nand2tetris.org/">Building a Modern Computer from First Principles</a>.</p>

<p>We recently built a project at Bendyworks that we call <a href="https://github.com/bendyworks/concert_cam">concert_cam</a>, which takes pictures at the <a href="http://www.liveonkingstreet.com/">Live on King Street concerts</a> outside our office. You can see a <a href="https://www.facebook.com/media/set/?set=a.180416672130576.1073741826.180178628821047&amp;type=3">gallery the pictures taken at the most recent concert</a> on Facebook. At some point I&#8217;ll blog about the <code>concert_cam</code> project and provide some lessons learned.</p>

<p>But for now, I&#8217;d like to talk about a project I&#8217;ve been working on for awhile: a chording keyboard. I don&#8217;t have a clever name for it, so the code currently lives at <a href="https://github.com/mathias/chording">github.com/mathias/chording</a>. The repo represents only some of the attempts I&#8217;ve made at getting it to work. (Code from several other attempts to code a chording keyboard died in a VMware Linux VM that ate its own disk image, and I didn&#8217;t commit any of that code. Luckily, that code was mostly things I&#8217;d ruled out as possible solutions.)</p>

<p>Building a chording keyboard in software is not trivial, so I have moved on to building one purely in hardware.</p>

<div id="background-section"></div>


<h2>Background information</h2>

<p>USB devices that we use for input, like mice and keyboards, implement something called USB HID, for Human Interface Device. Linux, Mac OSX and other operating systems have supported USB HID for a long time.</p>

<p>To build a chording keyboard that can work on any computer without special software installed, the device will have to implement USB HID and send the correct key events for a given chord.</p>

<p>There are lots of chording keyboard projects and commercial products out there. To name just a few:</p>

<ul>
<li>The <a href="http://en.wikipedia.org/wiki/Microwriter">Microwriter</a>, which the author of loper-os.org discusses in the essay <a href="http://www.loper-os.org/?p=861">Engelbart&#8217;s Violin</a>, and also <a href="http://www.loper-os.org/?p=1066">covered reverse-engineering</a>.</li>
<li>The <a href="http://www.handykey.com/">twiddler</a>, which is commercially available. I have used my coworker <a href="http://sencjw.com/">Chris</a>&#8217;s twiddler quite a bit, but couldn&#8217;t get over the TV-remote-control ergonomics.</li>
<li>The <a href="http://rhodesmill.org/brandon/projects/tabspace-guide.pdf">tabspace layout for the twidder</a> (PDF link), which is an optimized key map layout for Twiddler.</li>
<li>The <a href="http://wearcam.org/septambic/">septambic keyer</a> by Steve Mann.</li>
<li>The <a href="http://chordite.com/">chordite</a> keyboard.</li>
<li>The <a href="http://symlink.dk/projects/spiffchorder/">spaceman spiff layout / spiffchorder project</a>.</li>
<li>The <a href="http://gkos.com/gkos/index-gkos-com.html">gkos</a> project to create a software chording keyboard for smartphones.</li>
</ul>


<p>Ultimately, none of these projects or products really fit what I had in mind for a chording keyboard.</p>

<p>Why a chording keyboard, you might ask?</p>

<p>Well, I spend most of my work day editing text. While I am quite proficient at vim and slowly getting better at emacs, the kinds of key combos that a professional programmer uses daily are quite complex. There is a constant risk of RSI or carpal tunnel (which plagued me in my teens, but I have been free of for over a decade.)</p>

<p>With a chording keyboard, one could take a common key combo that you use all the time and put it under a much easier-to-type chord. This becomes especially attractive to me in replacing some of the key-combos required for operating emacs (especially those that use alt.)</p>

<p>Of course, such a device isn&#8217;t designed to completely replace having a keyboard on the desk. Even with a lot of practice, the reality is that I&#8217;ll probably continue to be faster at typing words on QWERTY. But having a chording keyboard off the left side, and a mouse on the right, seems to make sense. I am, after all, a software craftsman, and if I feel like I need to build a particular tool (even a physical piece of hardware) to augment my current toolbox, then it makes sense to do it.</p>

<p>For a long time, I have dreamed of a way of being able to record programming language keywords and idioms as macros, as well as methods to type faster. Since I haven&#8217;t found any way to train myself to type QWERTY faster, I started to look at alternatives. Learning Dvorak or Colemak might help, but it still doesn&#8217;t get me away from the legacy typewriter keyboard design.</p>

<p>And still, those alternative layouts doesn&#8217;t get me to the point where I can type out an entire block of code at once. For example, I might want to map a key to output something I frequently type, such as a Javascript anonymous function. Knowing which editor I&#8217;m in, I could have the keyboard leave the cursor in the function body, ready to be filled in:</p>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class=''><span class='line'>function() {
</span><span class='line'>  _
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>(where the underscore shown is the cursor position)</p>

<p>And lastly, I wanted to build a chording keyboard because it&#8217;s cool, it&#8217;s different, and because <strong>we frequently accept the paradigms handed to us in computing without really thinking about how we might improve or replace them.</strong></p>

<p>To understand chording keyboards best, it is worth noting that while regular keyboards detect the initial key being pressed down, a chording keyboard must detect when all of the keys in a chord are released simultaneously. Due to how fast electronics really are, no human could actually release all of the keys at exactly the same moment. For that reason, we need to implement chording in a way that takes time into account and looks to see if any chord pattern matches in the past n milliseconds.</p>

<h2>Brief project history</h2>

<p>After reviewing possible hardware to use to build a chording keyboard, I stumbled upon the Razer Nostromo (and its earlier incarnations from Belkin.) These gaming pads are popular with PC gamers because it puts the WASD keys under your left hand and frees your right hand up for the mouse.</p>

<p><img src="http://blog.mattgauger.com/images/razer_nostromo.jpg" alt="Razer Nostromo" /></p>

<p>Other features the Nostromo had over other devices were supporting <a href="http://en.wikipedia.org/wiki/Rollover_(key)#n-key_rollover">N-key rollover</a> &mdash; basically, the ability for the keyboard to know that multiple keys are being pressed at once, and send all of those keys to the computer &mdash; as well as a little 4-way directional pad, and blue lights (always a plus!)</p>

<p>The Nostromo also comes with a piece of software that you can install and remap the key mappings with. The key mappings get saved onto the device, meaning the device can operate without the software. The current mode is indicated by three LEDs near the thumb, which count up in binary, yielding 8 key maps. Additionally, any of the keys can trigger a pre-recorded macro of many key events.</p>

<p>Sadly, while the Nostromo software can have one key press trigger a sequence of buttons for you, for example, to macro a complicated action in a game, it did not support detecting a chord (multiple key presses simultaneously) into a single key event. So with that limitation in mind, I set about trying to write code to detect chords and turn them into key presses in software rather than at the hardware layer.</p>

<h3>mxk</h3>

<p>On Linux, there is a project called <a href="http://welz.org.za/projects/mxk">mxk</a>. <code>mxk</code> is basically a USB HID swiss army knife and HID event remixer, able to take input from any USB device, run it through various rules, and then output new USB HID events to the USB bus with a &#8220;virtual&#8221; USB HID device. Many example configuration scripts are provided, and one of the most common use seems to be to create a key press that turns a QWERTY keyboard into a DVORAK keyboard and back again, without having to change the Linux system settings. It seemed promising.</p>

<p><code>mxk</code> even indicated that it had support for two different kinds of chording: braille keyboard chording and a simpler chord-matching function.</p>

<p>After banging my head against its confusing configuration syntax for about 2 weeks, I determined that <code>mxk</code> just couldn&#8217;t do what I wanted. Two issues cropped up: in the braille chording function, only one row of keys was supported and two hands were assumed. (Basically, it wanted ASDF and JKL; keys to form chords, and didn&#8217;t support anything else.)</p>

<p>The regular chording functionality seemed like it might work, until I ran into a huge, glaring issue: A key used in one chord couldn&#8217;t be used in another. For example, let&#8217;s say I&#8217;m mapping keys for the left hand on a QWERTY keyboard to be used in a chord. So I might have a chord like RE which maps to &#8216;a&#8217; and another chord like FE that maps to &#8216;k&#8217;. The E used in both chords didn&#8217;t work in <code>mxk</code>. It simply couldn&#8217;t support it; it could only watch for unique chords. This limits the key map for a chording keyboard made of a 12-key grid from some 495 combinations to 12, gaining us nothing since individual key presses are just as efficient.</p>

<p>With these limitations discovered, I tried to hack the code for <code>mxk</code> to support my use case better. But, I don&#8217;t have much in the way of C chops when it comes to device drivers and pointers, and implementing code against Linux&#8217;s libHID is kind of a pain. Further, the <code>mxk</code> source isn&#8217;t very well documented, outside of very few comments littered around the code. Additionally, I found libHID&#8217;s docs unapproachable.</p>

<p>I realized that I was <strong>working at the wrong abstraction level</strong>, like so many projects that had frustrated me before. So I decided to move up to something at a higher level, with the hope that someone else had figured out the headaches of low-level libHID implementation. There are many high level libraries built on libHID. But since there isn&#8217;t a whole lot of need for them in most computing, they tend to be abandoned, very old, simplistic, or all of the above. I also was frustrated that my attempts so far would lock me into only using a Linux machine, as my normal work environment at Bendyworks is Mac OSX. We pair all of the time, so I would not be able to use my chording keyboard whenenver I paired with someone else.</p>

<h3>Plover</h3>

<p>Another project that I found that seemed promising was <a href="https://github.com/plover/plover">Plover</a>. At first glance, Plover doesn&#8217;t seem to be the right kind of software at all. It is an open source stenographer program that allows transcriptionists and court stenographers to turn a regular QWERTY keybord with n-key rollover into a high-end steno tool. The specialized hardware that court stenographers use can cost thousands of dollars, so an open source project that implements it for free on a $100 keyboard is a great win for those in that field.</p>

<p>Despite coming mapped for stenography and transcription &mdash; a system which I find very confusing &mdash; at its heart, Plover is a cross-platform Python GUI app that supports turning chords into words or phrases. This seemed like exactly what I needed. Going through the source code, I noticed that different keyboards got different configuration classes, and set about trying to create a class to map the keys on the Nostromo to the key events that Plover was expecting.</p>

<p>Now Plover comes with a huge dictionary of words that chords map to. And those chords are made up of certain key events, but not the ones we&#8217;re used to. (Some idea of how they look can be found <a href="https://github.com/plover/plover/blob/master/plover/machine/sidewinder.py#L14-L51">here</a> on Github.) How those special events combine and whether they come at the beginning or end of the chord seems to be the most important part of understanding this system. I struggled to understand the mappings, but it was pretty complicated. Plover comes with a giant, 124,000+ line JSON dictionary. I threw that out and started trying to write my own JSON dictionary; a humbler one that simply mapped chords to key events and a few Ruby &amp; JavaScript programming idioms.</p>

<p>I struggled with understanding the key event names and how they combined (since I don&#8217;t have a background in stenography) and eventually, lost the work due to the VMware Linux VM crash mentioned above. Taking it as a sign that I should not continue down the route of using Plover, I put aside the chording keyboard project for many months.</p>

<h3>Teensy and a return to hardware</h3>

<p>Originally I had tried to avoid hacking hardware so that I could focus on what I do day-to-day: write software. But in the end, I felt like I had exhausted my ability to get this project off the ground by only writing software.</p>

<p>When we built the <code>concert_cam</code> project at Bendyworks, the first version of the button pedestal we built utilized a <a href="http://www.pjrc.com/teensy/">Teensy board</a> &mdash; basically, a small Arduino-like microcontroller. The huge feature that the Teensy provides over other Atmel boards is that it comes out-of-the-box with a firmware that sets it up as a USB HID device.</p>

<p>The basic process for programming and using the Teensy is this:</p>

<ul>
<li>You program it in the Arduino IDE like other Arduino boards</li>
<li>Anything you &#8220;println&#8221; will be sent as if someone had typed it on a USB keyboard.</li>
<li>Additionally, there is a Mouse class that you can use to send mouse movement, click, and scroll wheel information.</li>
<li>When you upload your code to the Teensy, it reboots, and immediately starts behaving like a USB HID device as far as the operating system is concerned.</li>
</ul>


<p>For the <code>concert_cam</code>, it was easy enough to have a big arcade-style button send the keyboard event of &#8220;p&#8221; (for press) to the Raspberry Pi that the Teensy was attached to. A script on the Raspberry Pi watched for this keyboard input and told the camera to take a picture. It was very quick to get that working.</p>

<p>Here&#8217;s the <code>concert_cam</code> button pedestal with Teensy and Raspberry Pi getting wired in:</p>

<p><a href="http://www.flickr.com/photos/mattgauger/9427820477/" title="IMG_1817 by Matt Gauger, on Flickr"><img src="http://farm8.staticflickr.com/7395/9427820477_a8b4630519_z.jpg" width="480" height="640" alt="IMG_1817"></a></p>

<p>Confident by my success with using the Teensy in the <code>concert_cam</code>, I decided to put a Teensy in my Nostromo, replacing the normal USB board inside it and translating keyboard chords into key press events at the hardware level.</p>

<p>The first step is to open up the Nostromo. This is pretty easy; just unscrew all the visible screws, and find &amp; unscrew the other screws underneath the rubber feet of the gamepad. The Nostromo comes apart into three pieces, and looks like this inside:</p>

<p><a href="http://www.flickr.com/photos/mattgauger/9427844525/" title="iPhoto by Matt Gauger, on Flickr"><img src="http://farm4.staticflickr.com/3784/9427844525_4b59fa4bc3_b.jpg" width="581" height="733" alt="iPhoto"></a></p>

<p>The first problem encountered is those little grey ribbons - they&#8217;re ZIF surface mount stuff, and everything else inside is surface mount here, too. For an electronics hobbyist, surface mount components can represent a big source of frustration. For me, I just didn&#8217;t want to deal with them. I can&#8217;t really solder to the cables with any precision and the spacing of the connectors was so small that there was no hope of attaching wires there. Further, the circuit boards had traces running inside but didn&#8217;t really have any pins that I could solder to. A real bummer.</p>

<p>I thought that maybe I could get more of the plastic cable connectors (the little white and black connectors on the main circuit board), but with a regular pin spacing, not surface mount. All attempts to find such a part were unsuccessful. So I had to get creative.</p>

<p>The Nostromo uses membrane keys, which most laptop and PC keyboards nowadays do. A long time ago, almost all keyboards used &#8220;mechanical&#8221; key switches &#8211; switches that had springs or other tension devices and sent a keypress when continuity was made between two contacts. The loud, much-loved IBM Model M keyboard counts as a mechanical keyboard. Gaming keyboards and a few hardcore programmers (like many of us at Bendyworks) are holdouts for using mechanical keyboards, and a few companies still make them. For mechanical key switches, the current winner is the Cherry MX line. (To learn more about mechanical keyboards and Cherry MX switches, I recommend <a href="http://www.wasdkeyboards.com/mechanical-keyboard-guide">this guide</a>.)</p>

<p>Cherry MX key switches are not all that expensive, and I&#8217;d only need 15 to convert the Nostromo. I put in an order for the Cherry MX browns from <a href="http://www.wasdkeyboards.com/">wasdkeyboards.com</a> and they shipped them out fast. I figured I could get away with using the keycaps from a number pad, which are also cheap, and so I threw those into the order as well.</p>

<p>However, by replacing the key switches, I was getting into a realm of hardware hacking that I was trying to avoid: fabbing physical things from scratch. For this project, I wanted the keyboard to be sturdy and reliable; I didn&#8217;t want it to fall apart or move under my hand or rattle. Making a mounting plate that they keys snap into is the typical way that hobbyists build their own mechanical keyboards. And lots of people do, over on sites like <a href="http://deskthority.net/">deskthority.net</a> and <a href="http://geekhack.org/">geekhack.org</a>, but without a really well stocked workshop or a Makerspace membership, I didn&#8217;t want to go down that road.</p>

<p>Luckily, some quick googling turned up a <a href="http://www.xim3.com/community/index.php?PHPSESSID=98v9639t6etse5msjbupuogp24&amp;topic=8122.0">forum post in which the author replaces Nostromo key switches with Cherry MX keys</a>. The mounting plate for the membrane keys in the Nostromo requires only a little dremeling to convert. Since I was also throwing out the existing USB circuit board for the Nostromo, I can get away with removing the membrane switch PCB and soldering a cable directly to the Teensy&#8217;s pin headers, getting rid of those pesky ZIF cables.</p>

<p>Currently, I&#8217;m waiting for the key switches to arrive so that I can cut down the white mounting plate for each switch. My plan is to wire up each key to an IO line on the Teensy. Typically, keyboards use multiplexing in a grid to let the computer know which key was pressed: essentially, rows of keys are connected to one set of pins and columns of keys are connected to another set of pins, and when a pin for a row and a column goes HIGH, you know which key was pressed based on it being the intersect of that row and column. The issue you run into here is, again, complicated by chording. While the microcontroller can figure out reasonably well individual keys, there are issues on some keyboards with &#8221;<a href="http://www.microsoft.com/appliedsciences/antighostingexplained.mspx">ghosting</a>&#8221; other keys when chording.</p>

<p>Since I only have about 15 keys and maybe another 4 or 5 input/outputs that I need, I can get away with using separate IO lines on the Teensy 2.0. The Teensy++ 2.0 has are even more IO lines, which would make it better suited to projects with more IO lines needed. Not needing diodes to ground, not having to wire up a matrix, and not having to detect two pins makes both the hardware and software here much simpler.</p>

<h3>Scroll wheel</h3>

<p>While waiting for the key switches to arrive, I began work on the one non-surface-mount component in the Nostromo that I could solder to: the scroll wheel. On the scroll wheel&#8217;s PCB, there is a mechanical encoder, a button (the click when you press down on a mouse scroll wheel) and an LED.</p>

<p><a href="http://www.flickr.com/photos/mattgauger/9430775972/" title="skitched-20130803-121011 by Matt Gauger, on Flickr"><img src="http://farm8.staticflickr.com/7453/9430775972_991c8e8a8d_c.jpg" width="600" height="800" alt="skitched-20130803-121011"></a></p>

<p>Here&#8217;s a quick link for reading up on how mechanical encoders work in mice, and particularly, how to interface one with an Arduino: <a href="http://forum.arduino.cc/index.php/topic,15336.0.html">Mouse Scroll Wheel Sensor and Arduino</a>. There&#8217;s also some source code in that thread that will probably prove useful later. Note in the picture that the middle leg of the encoder is ground, and the two ends correspond to the signals sent when you rotate it &mdash; you&#8217;ll have to figure out whether the scroll direction matches their location yourself by experimenting.</p>

<p>I used part of my Friday Growth Day at Bendyworks to start wiring up and coding the firmware for the Nostromo&#8217;s scroll wheel. The basic idea is that the mechanical encoder has two outputs. You monitor both lines on separate IO pins on the Teensy, and whichever IO line goes HIGH first is the direction of the scroll. With the Teensy&#8217;s convenient Mouse class, you can then just send a scroll event to the OS. In a matter of minutes, I had my scroll wheel scrolling web pages. Not bad.</p>

<p>I&#8217;ll be implementing a variation on the sliding buffer for key events, so I will probably also use that code for handling scrolls (over a much shorter, separate buffer.)</p>

<p>Since I was trying to understand the mechanical encoder and could only really connect alligator clips to one pin at a time, I wrote up a quick Arduino script to detect only one direction of scrolling. Here&#8217;s that code:</p>

<script src="https://gist.github.com/mathias/6147169.js"></script>


<p>In my repo on Github: <a href="https://github.com/mathias/chording/blob/master/teensy/scroll_wheel/scroll_wheel.ino">scroll_wheel.ino</a></p>

<p>Note that this does not implement a sliding buffer or direction detection.</p>

<p>Eventually, I&#8217;d like to break my scroll wheel code out into an Arduino library that takes the two input pin numbers and a velocity as parameters to the constructor, and implements the scroll direction detection. The library would send the scroll event for you based on the velocity you passed in. But that will have to come later.</p>

<h3>Future work</h3>

<p>I&#8217;m going to be getting the key switches in the next week and beginning the hardware hacking to install them.</p>

<p>On the software end, I&#8217;d like to write a script (probably in Ruby) that takes a standardized keyboard mapping file and converts it into a C++ header file that the Arduino can utilize for its chord mappings. That way, I don&#8217;t have to maintain the header file manually or know what C++ constants map to what, I will simply edit my simple key mappings file and regenerate the code.</p>

<p>The <a href="https://github.com/mathias/chording/blob/master/twiddler_keymap.txt">twiddler_keymap.txt</a> file in the repo represents the current plan for my keymap. It is based on the <a href="">Tabspace layout</a> mentioned above in the <a href="#background-section">Background</a> section. I haven&#8217;t found any reason to not use the Tabspace layout, as it seems sensible and leaves plenty of room in the unmapped chords for me to implement key combos, programming language idioms, and text editor movement.</p>

<p>One last decision I need to make is whether to replace the Nostromo&#8217;s thumb directional pad. The current thumbpad uses membrane switches similar to the keys, and is all surface mount with very little access to its signals. One thought is to replace the 4-way pad with a Playstation-controller style <a href="https://www.sparkfun.com/products/9032">joystick</a> from Sparkfun.</p>

<p><a href="https://www.sparkfun.com/products/9032">
<img src="http://blog.mattgauger.com/images/sparkfun_joystick.jpg" alt="Sparkfun thumb joystick" />
</a></p>

<p>With this joystick, I&#8217;d be able to implement either mouse movements or arrow key movements, and could probably toggle which it behaves like with the small button located above the directional pad. However, securely mounting the joystick into the Nostromo case so that it is durable might prove an issue. I&#8217;ve put off making this decision until I have successfully hacked the mechanical switches in.</p>

<p>I&#8217;ll be blogging about each step of finishing this chording keyboard as I go. Stay tuned for the next post about installing up the key switches and wiring them to the Teensy.</p>

<h3>Final thoughts</h3>

<p>I&#8217;ve got a lot of projects, and I put them down regularly to focus on something else. That list of projects continues to grow and grow. So I don&#8217;t feel very guilty that I&#8217;ve put down this project for awhile and am just now picking it up again. I&#8217;m making good progress, and find it interesting rather than frustrating, so I will continue work on it.</p>

<p>In truth, this project doesn&#8217;t really represent much value outside of the things I&#8217;m learning as I go. I have no ambitions of turning this into a commercial product, and while some people might find my notes here useful, I&#8217;m not trying to make a repeatable project that others can build part-for-part. Is it worth it? Definitely. Is it for everyone? Probably not.</p>

<p>One thing I&#8217;d like to do after completing this device is begin work on a custom computer. Specifically, I want to learn enough digital logic concepts to design a whole computer in a language like Verilog or VHDL, and then burn the design into a FPGA board.</p>

<p>Such a computer would <strong>not</strong> be intended to compete with your Core i7 quad core &#8211; I&#8217;m thinking of implementing a unique architecture with the overall processing capability of something like an early 80&#8217;s microcomputer. It would be interesting, but not entirely useful for day-to-day computing.</p>

<p>When the computer is built, I&#8217;d begin implement an operating system on top of that computer in Lisp, along the lines of what the author of <a href="http://loper-os.org">loper-os.org</a> has been working towards for many years.</p>

<p>Such a project may take a decade or more to realize, though, and so is not undertaken lightly or easily accomplished.</p>

<hr />

<p>If you have any questions, comments, or your own chording keyboard project, I&#8217;d love to hear about it over on Twitter, where I am <a href="https://twitter.com/mathiasx">@mathiasx</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Minsky's Circle Algorithm in Shoes.rb / Hackety Hack]]></title>
    <link href="http://blog.mattgauger.com/blog/2013/07/27/minskys-circle-algorithm-in-shoes-dot-rb-slash-hackety-hack/"/>
    <updated>2013-07-27T11:32:00-05:00</updated>
    <id>http://blog.mattgauger.com/blog/2013/07/27/minskys-circle-algorithm-in-shoes-dot-rb-slash-hackety-hack</id>
    <content type="html"><![CDATA[<hr />

<p><em>(This post is part of my blog archiving project. This post appeared on <a href="https://coderwall.com/p/fukypa">Coderwall</a> on July 27, 2013.)</em></p>

<hr />

<p>I wanted to try to implement Minsky&#8217;s Circle Algorithm from the famous <a href="http://en.wikipedia.org/wiki/HAKMEM">HAKMEM</a>. As noted in lots of other places online (<a href="http://brainwagon.org/2010/08/09/drawing-circles-ala-marvin-minsky/">1</a>, <a href="https://news.ycombinator.com/item?id=3111501">2</a>, <a href="http://cabezal.com/misc/minsky-circles.html">3</a>), the algorithm doesn&#8217;t plot a true circle, but rather a very round ellipse. Here&#8217;s the text from the HAKMEM entry:</p>

<blockquote><p>ITEM 149 (Minsky): CIRCLE ALGORITHM Here is an elegant way to draw almost circles on a point-plotting display:</p>

<blockquote><p>&nbsp;&nbsp;&nbsp;NEW X = OLD X - epsilon * OLD Y</p>

<p>&nbsp;&nbsp;&nbsp;NEW Y = OLD Y + epsilon * NEW(!) X</p></blockquote>

<p>This makes a very round ellipse centered at the origin with its size determined by the initial point. epsilon determines the angular velocity of the circulating point, and slightly affects the eccentricity. If epsilon is a power of 2, then we don&#8217;t even need multiplication, let alone square roots, sines, and cosines! The &#8220;circle&#8221; will be perfectly stable because the points soon become periodic.</p>

<p>The circle algorithm was invented by mistake when I tried to save one register in a display hack! Ben Gurley had an amazing display hack using only about six or seven instructions, and it was a great wonder. But it was basically line-oriented. It occurred to me that it would be exciting to have curves, and I was trying to get a curve display hack with minimal instructions.</p></blockquote>

<p>The benefit of using this algorithm, at the time, was that it doesn&#8217;t use cosine/sine or any other complicated functions, and so could be implemented on the rather-limited computers of that time to draw circles fast. (I believe it was used to draw the orbits of ships on the early game <a href="http://en.wikipedia.org/wiki/Spacewar_(video_game">SpaceWar</a>, but I don&#8217;t know that for sure.)</p>

<p>To implement it myself, I needed to be able to plot points on a display. So I turned to Hackety-Hack, which comes with Shoes for drawing graphics. The Shoes DSL for drawing shapes is rather simple, which means we can take the pseudocode above and turn it into a working demo rather easily:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Shoes</span><span class="o">.</span><span class="n">app</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">epsilon</span> <span class="o">=</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="o">/</span><span class="mi">16</span>
</span><span class='line'>  <span class="n">offset</span> <span class="o">=</span> <span class="mi">250</span>
</span><span class='line'>  <span class="n">x</span> <span class="o">=</span> <span class="mi">20</span>
</span><span class='line'>  <span class="n">y</span> <span class="o">=</span> <span class="mi">20</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">fill</span> <span class="n">red</span>
</span><span class='line'>  <span class="n">shape</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">move_to</span><span class="p">(</span><span class="n">x</span> <span class="o">+</span> <span class="n">offset</span><span class="p">,</span><span class="n">y</span> <span class="o">+</span> <span class="n">offset</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="mi">100</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">x</span> <span class="o">=</span> <span class="n">x</span> <span class="o">-</span> <span class="n">epsilon</span> <span class="o">*</span> <span class="n">y</span>
</span><span class='line'>      <span class="n">y</span> <span class="o">=</span> <span class="n">y</span> <span class="o">+</span> <span class="n">epsilon</span> <span class="o">*</span> <span class="n">x</span>
</span><span class='line'>      <span class="n">line_to</span><span class="p">(</span><span class="n">x</span> <span class="o">+</span> <span class="n">offset</span><span class="p">,</span><span class="n">y</span> <span class="o">+</span> <span class="n">offset</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">fill</span> <span class="n">blue</span>
</span><span class='line'>  <span class="n">oval</span><span class="p">({</span><span class="ss">top</span><span class="p">:</span> <span class="mi">250</span><span class="p">,</span> <span class="ss">left</span><span class="p">:</span> <span class="mi">320</span><span class="p">,</span> <span class="ss">radius</span><span class="p">:</span> <span class="mi">25</span><span class="p">,</span> <span class="ss">center</span><span class="p">:</span> <span class="kp">true</span><span class="p">})</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Epsilon is 1/16, as indicated by some quick googling &#8211; basically a small power of two. I have to use the offset to get the center of the circle closer to the center of the Shoes window &#8211; without the offset, the circle will only be a quarter-circle in the upper left corner.</p>

<h2>How does this compare to plotting a real circle?</h2>

<p>If we want to compare the roundness of our &#8220;circle&#8221; to a real circle drawn by Shoes, we can add this line in before the closing <code>end</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">fill</span> <span class="n">blue</span>
</span><span class='line'>  <span class="n">oval</span><span class="p">({</span><span class="ss">top</span><span class="p">:</span> <span class="mi">250</span><span class="p">,</span> <span class="ss">left</span><span class="p">:</span> <span class="mi">320</span><span class="p">,</span> <span class="ss">radius</span><span class="p">:</span> <span class="mi">25</span><span class="p">,</span> <span class="ss">center</span><span class="p">:</span> <span class="kp">true</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>Although their radiuses are going to be slightly different.</p>

<p>Here&#8217;s what we end up with. Minsky&#8217;s Circle Algorithm on the left in red, a real circle on the right in blue:</p>

<p><img src="http://www.mattgauger.com/img//Shoes-20130727-151954.jpg" alt="Hackety Hack" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WARNING: Nokogiri was built against LibXML version x.x.x]]></title>
    <link href="http://blog.mattgauger.com/blog/2013/05/23/warning-nokogiri-was-built-against-libxml-version-x-dot-x-x/"/>
    <updated>2013-05-23T11:46:00-05:00</updated>
    <id>http://blog.mattgauger.com/blog/2013/05/23/warning-nokogiri-was-built-against-libxml-version-x-dot-x-x</id>
    <content type="html"><![CDATA[<hr />

<p><em>(This post is part of my blog archiving project. This post appeared on <a href="https://coderwall.com/p/kia38w">Coderwall</a> on May 23, 2013.)</em></p>

<hr />

<p>When you run tests or rake, if you see:</p>

<pre><code>WARNING: Nokogiri was built against LibXML version 2.9.0, but has dynamically loaded 2.7.8
</code></pre>

<p>Then do the following:</p>

<pre><code> gem uninstall nokogiri libxml-ruby

brew update

brew uninstall libxml2
brew install libxml2 --with-xml2-config

brew uninstall libxslt
brew install libxslt
brew unlink libxslt

bundle config build.nokogiri -- --with-xml2-dir=/usr --with-xslt-dir=/usr --with-iconv-dir=/usr
bundle
</code></pre>

<p>Nokogiri should now be compiled against the right version!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reset a lost password on an Ubuntu VM]]></title>
    <link href="http://blog.mattgauger.com/blog/2013/04/24/reset-a-lost-password-on-an-ubuntu-vm/"/>
    <updated>2013-04-24T11:46:00-05:00</updated>
    <id>http://blog.mattgauger.com/blog/2013/04/24/reset-a-lost-password-on-an-ubuntu-vm</id>
    <content type="html"><![CDATA[<hr />

<p><em>(This post is part of my blog archiving project. This post appeared on <a href="https://coderwall.com/p/vibura">Coderwall</a> on April 24, 2013.)</em></p>

<hr />

<p>You may be like me and keep a couple virtual machines around on your laptop for development, testing, and gaming. I had an Ubuntu VM in VMWare that I&#8217;d lost the password to, and I wanted to reset it so that I could get back to coding.</p>

<p>Typically, with a desktop computer or a server, you hold down some key while the computer is booting to get into the Grub boot manager and then boot into something called &#8220;single user mode&#8221;, where you&#8217;re able to change passwords, fix configs, repair disks, etc.</p>

<p>Unfortunately, the boot screen just flies right by in Ubuntu under VMWare. So the first thing you&#8217;ll need to do is shut down the VM, and then get ready to start it up. <strong>But before you start the VM</strong>: get ready to hit <code>Shift</code> because that&#8217;s what will get you into Grub. Ready? Ok. Boot it and hit <code>Shift</code>.</p>

<p>Now you should be in Grub. If you don&#8217;t get it, don&#8217;t worry, just shut down and try again.</p>

<p>Choose the &#8216;Advanced Options&#8217; and then any of the &#8220;recovery&#8221; lines from the Grub menu for Ubuntu.</p>

<p>You&#8217;ll get dropped into another menu system. Choose <code>root</code>: this is the single-user mode where you are root.</p>

<p>Your / filesystem may be mounted as read-only at this point. Type this to mount it as read-write:</p>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class=''><span class='line'>mount -rw -o remount /</span></code></pre></td></tr></table></div></figure>


<p>Now you can reset passwords, etc, like this:</p>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class=''><span class='line'>passwd myuser</span></code></pre></td></tr></table></div></figure>


<p>Good luck!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[By augmenting human intellect, we mean]]></title>
    <link href="http://blog.mattgauger.com/blog/2013/03/17/by-augmenting-human-intellect/"/>
    <updated>2013-03-17T22:44:00-05:00</updated>
    <id>http://blog.mattgauger.com/blog/2013/03/17/by-augmenting-human-intellect</id>
    <content type="html"><![CDATA[<blockquote>
By &#8220;augmenting human intellect&#8221; we mean increasing the capability of a man to approach a complex problem situation, to gain comprehension to suit his particular needs, and to derive solutions to problems. Increased capability in this respect is taken to mean a mixture of the following: more-rapid comprehension, better comprehension, the possibility of gaining a useful degree of comprehension in a situation that previously was too complex, speedier solutions, better solutions, and the possibility of finding solutions to problems that before seemed insoluble. And by &#8220;complex situations&#8221; we include the professional problems of diplomats, executives, social scientists, life scientists, physical scientists, attorneys, designers&#8211;whether the problem situation exists for twenty minutes or twenty years. We do not speak of isolated clever tricks that help in particular situations. We refer to a way of life in an integrated domain where hunches, cut-and-try, intangibles, and the human &#8220;feel for a situation&#8221; usefully co-exist with powerful concepts, streamlined terminology and notation, sophisticated methods, and high-powered electronic aids.
<footer>
<strong>Douglas C. Engelbart</strong>
&ndash;
<cite><a href="http://www.dougengelbart.org/pubs/augment-3906.html">Augmenting Human Intellect: A Conceptual Framework </a></cite>
</blockquote>

]]></content>
  </entry>
  
</feed>
